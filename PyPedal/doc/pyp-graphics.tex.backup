\label{sec:pyp-graphics}
pyp\_graphics\index[func]{pyp_graphics} contains routines for working with graphics in PyPedal, such as creating directed graphs from pedigrees using PyDot and visualizing relationship matrices using Rick Muller's spy and pcolor routines (\url{http://aspn.activestate.com/ASPN/Cookbook/Python/}). The Python Imaging Library (\url{http://www.pythonware.com/products/pil/}), matplotlib (\url{http://matplotlib.sourceforge.net/}), Graphviz (\url{http://www.graphviz.org/}), and pydot (\url{http://dkbza.org/pydot.html}) are required by one or more routines in this module. They ARE NOT distributed with PyPedal and must be installed by the end-user! Note that the matplotlib functionality in PyPedal requires only the Agg backend, which means that you do not have to install GTK/PyGTK or WxWidgets/PyWxWidgets just to use PyPedal. Please consult the sites above for details on licensing and installation.
\subsection*{Module Contents}
\begin{description}
\item[\textbf{draw\_pedigree(pedobj, gfilename='pedigree', gtitle='My\_Pedigree', gformat='jpg', gsize='f',gdot='1', gorient='l', gdirec='', gname=0, gfontsize=10, garrow=1, gtitloc='b', gtitjust='c')} $\Rightarrow$ integer]
\index[func]{pyp_graphics!draw\_pedigree()}
\label{sec:pyp-graphics-draw-pedigree}
draw\_pedigree() uses the pydot bindings to the graphviz library -- if they are available on your system -- to produce a directed graph of your pedigree with paths of inheritance as edges and animals as nodes. If there is more than one generation in the pedigree as determind by the ``gen'' attributes of the animals in the pedigree, draw\_pedigree() will use subgraphs to try and group animals in the same generation together in the drawing.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{gfilename}] The name of the file to which the pedigree should be drawn
\item[\emph{gtitle}] The title of the graph.
\item[\emph{gformat}] The format in which the output file should be written  (JPG|PNG|PS).
\item[\emph{gsize}] The size of the graph: 'f': full-size, 'l': letter-sized page.
\item[\emph{gdot}] Whether or not to write the dot code for the pedigree graph to a file (can produce large files).
\item[\emph{gorient}] The orientation of the graph: 'p': portrait, 'l': landscape.
\item[\emph{gdirec}] Direction of flow from parents to offspring: 'TB': top-bottom, 'LR': left-right, 'RL': right-left.
\item[\emph{gname}] Flag indicating whether ID numbers (0) or names (1) should be used to label nodes.
\item[\emph{gfontsize}] Integer indicating the typeface size to be used in labelling nodes.
\item[\emph{garrow}] Flag indicating whether or not arrowheads should be drawn.
\item[\emph{gtitloc}] Indicates if the title be drawn or above ('t') or below ('b') the graph.
\item[\emph{gtitjust}] Indicates if the title should be center- ('c'), left- ('l'), or right-justified ('r').
\item[Returns:] A 1 for success and a 0 for failure.
\end{description}
\item[\textbf{pcolor\_matrix\_pylab(A, fname='pcolor\_matrix\_matplotlib')} $\Rightarrow$ lists]
\index[func]{pyp_graphics!pcolor\_matrix\_pylab()}
pcolor\_matrix\_pylab() implements a matlab-like 'pcolor' function to display the large elements of a matrix in pseudocolor using the Python Imaging Library.
\begin{description}
\item[\emph{A}] Input Numpy matrix (such as a numerator relationship matrix).
\item[\emph{fname}] Output filename to which to dump the graphics (default 'tmp.png')
\item[\emph{do\_outline}] Whether or not to print an outline around the block (default 0)
\item[\emph{height}] The height of the image (default 300)
\item[\emph{width}] The width of the image (default 300)
\item[Returns:] A list of Animal() objects; a pedigree metadata object.
\end{description}
\item[\textbf{plot\_founders\_by\_year(pedobj, gfilename='founders\_by\_year', gtitle='Founders by Birthyear')} $\Rightarrow$ integer]
\index[func]{pyp_graphics!plot\_founders\_by\_year()}
founders\_by\_year() uses matplotlib -- if available on your system -- to produce a bar graph of the number (count) of founders in each birthyear.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{gfilename}] The name of the file to which the pedigree should be drawn
\item[\emph{gtitle}] The title of the graph.
\item[Returns:] A 1 for success and a 0 for failure.
\end{description}
\item[\textbf{plot\_founders\_pct\_by\_year(pedobj, gfilename='founders\_pct\_by\_year', gtitle='Founders by Birthyear')} $\Rightarrow$ integer]
\index[func]{pyp_graphics!plot\_founders\_pct\_by\_year()}
founders\_pct\_by\_year() uses matplotlib -- if available on your system -- to produce a line graph of the frequency (percentage) of founders in each birthyear.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{gfilename}] The name of the file to which the pedigree should be drawn
\item[\emph{gtitle}] The title of the graph.
\item[Returns:] A 1 for success and a 0 for failure.
\end{description}
\index[func]{pyp_graphics!plot\_line\_xy()}
\label{sec:pyp-graphics-plot-line-xy}
\item[\textbf{plot\_line\_xy(xydict, gfilename='plot\_line\_xy', gtitle='Value by key', gxlabel='X', gylabel='Y', gformat='png')} $\Rightarrow$ integer]
plot\_line\_xy() uses matplotlib -- if available on your system -- to produce a line graph of the values in a dictionary for each level of key.
\begin{description}
\item[\emph{dictionary}] A Python dictionary
\item[\emph{gfilename}] The name of the file to which the figure should be written
\item[\emph{gtitle}] The title of the graph.
\item[\emph{gxlabel}] The label for the x-axis.
\item[\emph{gylabel}] The label for the y-axis.
\item[Returns:] A 1 for success and a 0 for failure.
\end{description}
\item[\textbf{rmuller\_get\_color(a, cmin, cmax)} $\Rightarrow$ integer]
\index[func]{pyp_graphics!rmuller\_get\_color()}
rmuller\_get\_color() Converts a float value to one of a continuous range of colors using recipe 9.10 from the Python Cookbook.
\begin{description}
\item[\emph{a}] Float value to convert to a color.
\item[\emph{cmin}] Minimum value in array (?).
\item[\emph{cmax}] Maximum value in array (?).
\item[Returns:] An RGB triplet.
\end{description}
\item[\textbf{rmuller\_pcolor\_matrix\_pil(A, fname='tmp.png', do\_outline=0, height=300, width=300)} $\Rightarrow$ lists]
\index[func]{pyp_graphics!rmuller\_pcolor\_matrix\_pil()}
rmuller\_pcolor\_matrix\_pil() implements a matlab-like 'pcolor' function to display the large elements of a matrix in pseudocolor using the Python Imaging Library.
\begin{description}
\item[\emph{A}] Input Numpy matrix (such as a numerator relationship matrix).
\item[\emph{fname}] Output filename to which to dump the graphics (default 'tmp.png')
\item[\emph{do\_outline}] Whether or not to print an outline around the block (default 0)
\item[\emph{height}] The height of the image (default 300)
\item[\emph{width}] The width of the image (default 300)
\item[Returns:] A list of Animal() objects; a pedigree metadata object.
\end{description}
\item[\textbf{rmuller\_spy\_matrix\_pil(A, fname='tmp.png', cutoff=0.1, do\_outline=0, height=300, width=300)} $\Rightarrow$ lists]
\index[func]{pyp_graphics!rmuller\_spy\_matrix\_pil()}
rmuller\_spy\_matrix\_pil() implements a matlab-like 'spy' function to display the sparsity of a matrix using the Python Imaging Library.
\begin{description}
\item[\emph{A}] Input Numpy matrix (such as a numerator relationship matrix).
\item[\emph{fname}] Output filename to which to dump the graphics (default 'tmp.png')
\item[\emph{cutoff}] Threshold value for printing an element (default 0.1)
\item[\emph{do\_outline}] Whether or not to print an outline around the block (default 0)
\item[\emph{height}] The height of the image (default 300)
\item[\emph{width}] The width of the image (default 300)
\item[Returns:] A list of Animal() objects; a pedigree metadata object.
\end{description}
\item[\textbf{spy\_matrix\_pylab(A, fname='spy\_matrix\_matplotlib')} $\Rightarrow$ lists]
\index[func]{pyp_graphics!spy\_matrix\_pylab()}
spy\_matrix\_pylab() implements a matlab-like 'pcolor' function to display the large elements of a matrix in pseudocolor using the Python Imaging Library.
\begin{description}
\item[\emph{A}] Input Numpy matrix (such as a numerator relationship matrix).
\item[\emph{fname}] Output filename to which to dump the graphics (default 'tmp.png')
\item[\emph{do\_outline}] Whether or not to print an outline around the block (default 0)
\item[\emph{height}] The height of the image (default 300)
\item[\emph{width}] The width of the image (default 300)
\item[Returns:] A list of Animal() objects; a pedigree metadata object.
\end{description}
\end{description}