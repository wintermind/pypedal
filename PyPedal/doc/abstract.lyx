#LyX file created by  tex2lyx 0.1.2
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble

\end_preamble
\language english
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
chapter{Abstract Objects Layer 
\backslash
label{abstract}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The functions in this chapter interact with Python objects regardless of their type, or with wide classes of object types (e.g. all numerical types, or all sequence types). When used on object types for which they do not apply, they will raise a Python exception.
\end_layout

\begin_layout Section

Object Protocol 
\begin_inset LatexCommand \label{object}

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectPrint
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, FILE *fp, int flags
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Print an object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, on file 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

fp
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on error. The flags argument is used to enable certain printing options. The only option currently supported is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyPRINTRAW
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

; if given, the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
function
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

str()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 of the object is written instead of the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
function
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

repr()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectHasAttrString
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, char *attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 has the attribute 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 otherwise. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

hasattr(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. This function always succeeds. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectGetAttrString
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, char *attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Retrieve an attribute named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 from object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns the attribute value on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectHasAttr
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 has the attribute 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 otherwise. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

hasattr(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. This function always succeeds. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectGetAttr
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Retrieve an attribute named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 from object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns the attribute value on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectSetAttrString
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, char *attrname, PyObject *v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Set the value of the attribute named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, for object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, to the value 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 = 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectSetAttr
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *attrname, PyObject *v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Set the value of the attribute named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, for object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, to the value 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 = 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectDelAttrString
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, char *attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Delete attribute named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, for object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python statement: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

del 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectDelAttr
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Delete attribute named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, for object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

del 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

attrname
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectRichCompare
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2, int opid
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Compare the values of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 using the operation specified by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

opid
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, which must be one of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyLT
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyLE
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyEQ
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNE
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyGT
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyGE
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, corresponding to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

<
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

<=
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

==
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

!=
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

>
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

>=
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 respectively. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 op 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, where 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

op
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is the operator corresponding to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

opid
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns the value of the comparison on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectRichCompareBool
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2, int opid
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Compare the values of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 using the operation specified by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

opid
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, which must be one of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyLT
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyLE
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyEQ
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNE
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyGT
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
constant
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyGE
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, corresponding to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

<
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

<=
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

==
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

!=
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

>
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

>=
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 respectively. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on error, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if the result is false, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 otherwise. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 op 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, where 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

op
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is the operator corresponding to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

opid
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectCmp
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2, int *result
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Compare the values of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 using a routine provided by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, if one exists, otherwise with a routine provided by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. The result of the comparison is returned in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

result
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python statement
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cmp
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

result
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 = cmp(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectCompare
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Compare the values of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 using a routine provided by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, if one exists, otherwise with a routine provided by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns the result of the comparison on success. On error, the value returned is undefined; use 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyErrOccurred()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to detect an error. This is equivalent to the Python expression
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cmp
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cmp(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectRepr
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Compute a string representation of object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns the string representation on success, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

repr(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Called by the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
function
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

repr()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

repr
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 built-in function and by reverse quotes. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectStr
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Compute a string representation of object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns the string representation on success, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

str(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Called by the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
function
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

str()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

str
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 built-in function and by the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
keyword
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

print
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 statement. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectUnicode
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Compute a Unicode string representation of object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns the Unicode string representation on success, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

unicode(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Called by the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
function
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

unicode()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

unicode
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 built-in function. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectIsInstance
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *inst, PyObject *cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

inst
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is an instance of the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 or a subclass of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if not. On error, returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and sets an exception. If 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is a type object rather than a class object, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectIsInstance()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

inst
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is of type 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is a tuple, the check will be done against every entry in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. The result will be 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 when at least one of the checks returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, otherwise it will be 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

inst
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is not a class instance and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is neither a type object, nor a class object, nor a tuple, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

inst
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 must have a 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
member
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 attribute --- the class relationship of the value of that attribute with 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 will be used to determine the result of this function. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionchanged
\end_layout

\end_inset

[Support for a tuple as the second argument added]
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

Subclass determination is done in a fairly straightforward way, but includes a wrinkle that implementors of extensions to the class system may want to be aware of. If 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
class
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

A
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
class
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

B
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 are class objects, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
class
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

B
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is a subclass of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
class
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

A
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if it inherits from 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
class
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

A
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 either directly or indirectly. If either is not a class object, a more general mechanism is used to determine the class relationship of the two objects. When testing if 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

B
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is a subclass of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

A
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, if 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

A
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

B
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectIsSubclass()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 returns true. If 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

A
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

B
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 are different objects, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

B
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

's 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
member
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

bases
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 attribute is searched in a depth-first fashion for 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

A
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 --- the presence of the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
member
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

bases
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 attribute is considered sufficient for this determination.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectIsSubclass
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *derived, PyObject *cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

derived
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is identical to or derived from the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, otherwise returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. In case of an error, returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is a tuple, the check will be done against every entry in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. The result will be 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 when at least one of the checks returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, otherwise it will be 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If either 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

derived
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

cls
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is not an actual class object (or tuple), this function uses the generic algorithm described above. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionchanged
\end_layout

\end_inset

[Older versions of Python did not support a tuple as the second argument]
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.3
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyCallableCheck
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Determine if the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is callable. Return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if the object is callable and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 otherwise. This function always succeeds. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectCall
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *callableobject, PyObject *args, PyObject *kw
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Call a callable Python object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

callableobject
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, with arguments given by the tuple 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, and named arguments given by the dictionary 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

kw
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If no named arguments are needed, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

kw
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 may be 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 must not be 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

, use an empty tuple if no arguments are needed. Returns the result of the call on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

apply(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

callableobject
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

kw
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

callableobject
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

(*
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, **
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

kw
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

apply
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectCallObject
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *callableobject, PyObject *args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Call a callable Python object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

callableobject
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, with arguments given by the tuple 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If no arguments are needed, then 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 may be 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

. Returns the result of the call on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

apply(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

callableobject
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

callableobject
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

(*
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

apply
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectCallFunction
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *callable, char *format, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
moreargs
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Call a callable Python object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

callable
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, with a variable number of C arguments. The C arguments are described using a 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyBuildValue()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 style format string. The format may be 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

, indicating that no arguments are provided. Returns the result of the call on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

apply(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

callable
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

callable
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

(*
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

apply
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectCallMethod
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, char *method, char *format, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
moreargs
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Call the method named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

method
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 of object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with a variable number of C arguments. The C arguments are described by a 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyBuildValue()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 format string that should produce a tuple. The format may be 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

, indicating that no arguments are provided. Returns the result of the call on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

method
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

args
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectCallFunctionObjArgs
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *callable, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
moreargs
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

NULL
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Call a callable Python object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

callable
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, with a variable number of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
ctype
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 arguments. The arguments are provided as a variable number of parameters followed by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

. Returns the result of the call on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectCallMethodObjArgs
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *name, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
moreargs
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

NULL
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Calls a method of the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, where the name of the method is given as a Python string object in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

name
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. It is called with a variable number of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
ctype
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 arguments. The arguments are provided as a variable number of parameters followed by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

. Returns the result of the call on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectHash
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Compute and return the hash value of an object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. On failure, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

hash(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

hash
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectIsTrue
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is considered to be true, and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 otherwise. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

not not 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. On failure, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectNot
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is considered to be true, and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 otherwise. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

not 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. On failure, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectType
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 When 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is non-
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

, returns a type object corresponding to the object type of object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. On failure, raises 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
exception
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

SystemError
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

type(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

type
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 This function increments the reference count of the return value. There's really no reason to use this function instead of the common expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

->obtype
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, which returns a pointer of type 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
ctype
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyTypeObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, except when the incremented reference count is needed. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectTypeCheck
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyTypeObject *type
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return true if the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is of type 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

type
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 or a subtype of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

type
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Both parameters must be non-
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectLength
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfuncline
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectSize
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the length of object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 provides either the sequence and mapping protocols, the sequence length is returned. On error, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is returned. This is the equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

len(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

len
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectGetItem
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return element of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 corresponding to the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

]
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectSetItem
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *key, PyObject *v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Map the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to the value 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

] = 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectDelItem
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Delete the mapping for 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 from 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

del 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

]
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectAsFileDescriptor
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Derives a file-descriptor from a Python object. If the object is an integer or long integer, its value is returned. If not, the object's 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
method
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

fileno()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 method is called if it exists; the method must return an integer or long integer, which is returned as the file descriptor value. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectDir
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

dir(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, returning a (possibly empty) list of strings appropriate for the object argument, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 if there was an error. If the argument is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

, this is like the Python 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

dir()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, returning the names of the current locals; in this case, if no execution frame is active then 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 is returned but 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyErrOccurred()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 will return false. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectGetIter
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

iter(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. It returns a new iterator for the object argument, or the object itself if the object is already an iterator. Raises 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
exception
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

TypeError
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 if the object cannot be iterated. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Section

Number Protocol 
\begin_inset LatexCommand \label{number}

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberCheck
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 provides numeric protocols, and false otherwise. This function always succeeds. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberAdd
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of adding 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 + 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberSubtract
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of subtracting 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 from 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 - 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberMultiply
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of multiplying 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 * 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberDivide
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of dividing 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 / 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberFloorDivide
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the floor of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 divided by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is equivalent to the 
\begin_inset Quotes eld
\end_inset

classic
\begin_inset Quotes erd
\end_inset

 division of integers. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberTrueDivide
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return a reasonable approximation for the mathematical value of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 divided by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The return value is 
\begin_inset Quotes eld
\end_inset

approximate
\begin_inset Quotes erd
\end_inset

 because binary floating point numbers are approximate; it is not possible to represent all real numbers in base two. This function can return a floating point value when passed two integers. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberRemainder
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the remainder of dividing 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 %
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
 
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberDivmod
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 See the built-in function 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
function
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

divmod()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

divmod
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

divmod(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberPower
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2, PyObject *o3
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 See the built-in function 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
function
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

pow()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

pow
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

pow(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o3
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, where 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o3
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is optional. If 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o3
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is to be ignored, pass 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cdata
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNone
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 in its place (passing 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 for 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o3
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 would cause an illegal memory access). 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberNegative
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the negation of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberPositive
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

+
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberAbsolute
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the absolute value of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

abs(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

abs
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInvert
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the bitwise negation of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\i \~{
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset

}

\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberLshift
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of left shifting 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 <
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

<
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberRshift
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of right shifting 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 >
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

>
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberAnd
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the 
\begin_inset Quotes eld
\end_inset

bitwise and
\begin_inset Quotes erd
\end_inset

 of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 &
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
 
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberXor
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the 
\begin_inset Quotes eld
\end_inset

bitwise exclusive or
\begin_inset Quotes erd
\end_inset

 of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 ^ 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberOr
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the 
\begin_inset Quotes eld
\end_inset

bitwise or
\begin_inset Quotes erd
\end_inset

 of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 | 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceAdd
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of adding 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 += 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceSubtract
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of subtracting 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 from 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 -= 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceMultiply
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of multiplying 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 *= 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceDivide
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of dividing 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 /= 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceFloorDivide
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the mathematical floor of dividing 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 //= 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceTrueDivide
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return a reasonable approximation for the mathematical value of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 divided by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The return value is 
\begin_inset Quotes eld
\end_inset

approximate
\begin_inset Quotes erd
\end_inset

 because binary floating point numbers are approximate; it is not possible to represent all real numbers in base two. This function can return a floating point value when passed two integers. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceRemainder
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the remainder of dividing 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 %= 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlacePower
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2, PyObject *o3
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 See the built-in function 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
function
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

pow()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

pow
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 **= 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 when o3 is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cdata
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNone
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or an in-place variant of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

pow(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o3
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 otherwise. If 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o3
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is to be ignored, pass 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cdata
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNone
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 in its place (passing 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 for 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o3
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 would cause an illegal memory access). 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceLshift
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of left shifting 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 <
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

<=
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceRshift
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the result of right shifting 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 >
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

>=
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceAnd
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the 
\begin_inset Quotes eld
\end_inset

bitwise and
\begin_inset Quotes erd
\end_inset

 of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 &= 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceXor
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the 
\begin_inset Quotes eld
\end_inset

bitwise exclusive or
\begin_inset Quotes erd
\end_inset

 of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 ^= 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInPlaceOr
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the 
\begin_inset Quotes eld
\end_inset

bitwise or
\begin_inset Quotes erd
\end_inset

 of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 |= 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberCoerce
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject **p1, PyObject **p2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 This function takes the addresses of two variables of type 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
ctype
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If the objects pointed to by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

*
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

p1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

*
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

p2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 have the same type, increment their reference count and return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 (success). If the objects can be converted to a common numeric type, replace 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

*p1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

*p2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 by their converted value (with 'new' reference counts), and return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If no conversion is possible, or if some other error occurs, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 (failure) and don't increment the reference counts. The call 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberCoerce(&o1, &o2)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is equivalent to the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 = coerce(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

coerce
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberInt
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 converted to an integer object on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. If the argument is outside the integer range a long object will be returned instead. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberLong
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 converted to a long integer object on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

long(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

long
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyNumberFloat
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 converted to a float object on success, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

float(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

float
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Section

Sequence Protocol 
\begin_inset LatexCommand \label{sequence}

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceCheck
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if the object provides sequence protocol, and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 otherwise. This function always succeeds. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceSize
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the number of objects in sequence 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. For objects that do not provide sequence protocol, this is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

len(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

len
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceLength
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Alternate name for 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceSize()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceConcat
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the concatenation of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 + 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceRepeat
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, int count
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the result of repeating sequence object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

count
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 times, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 * 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

count
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceInPlaceConcat
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o1, PyObject *o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the concatenation of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 += 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceInPlaceRepeat
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, int count
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the result of repeating sequence object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

count
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 times, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. The operation is done 
\emph on
in-place
\emph default
 when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports it. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 *= 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

count
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceGetItem
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, int i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

th element of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

]
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceGetSlice
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, int i1, int i2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the slice of sequence object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 between 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

]
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceSetItem
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, int i, PyObject *v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Assign object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

th element of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

] = 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. This function 
\emph on
does not
\emph default
 steal a reference to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceDelItem
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, int i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Delete the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

th element of object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

del 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

]
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceSetSlice
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, int i1, int i2, PyObject *v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Assign the sequence object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to the slice in sequence object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 from 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

] = 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceDelSlice
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, int i1, int i2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Delete the slice in sequence object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 from 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

del 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

]
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceTuple
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 as a tuple on success, and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

tuple(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

tuple
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceCount
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *value
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the number of occurrences of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

value
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, that is, return the number of keys for which 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

] == 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

value
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. On failure, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.count(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

value
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceContains
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *value
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Determine if 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 contains 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

value
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If an item in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is equal to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

value
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, otherwise return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. On error, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

value
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceIndex
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *value
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the first index 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 for which 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

] == 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

value
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. On error, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.index(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

value
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceList
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return a list object with the same contents as the arbitrary sequence 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. The returned list is guaranteed to be new. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceTuple
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return a tuple object with the same contents as the arbitrary sequence 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is a tuple, a new reference will be returned, otherwise a tuple will be constructed with the appropriate contents. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceFast
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, const char *m
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the sequence 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 as a tuple, unless it is already a tuple or list, in which case 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is returned. Use 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceFastGETITEM()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to access the members of the result. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. If the object is not a sequence, raises 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
exception
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

TypeError
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

m
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 as the message text. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceFastGETITEM
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, int i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

th element of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, assuming that 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 was returned by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceFast()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is not 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

, and that 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is within bounds. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject**
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceFastITEMS
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the underlying array of PyObject pointers. Assumes that 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 was returned by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceFast()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is not 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.4
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceITEM
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, int i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

i
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

th element of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. Macro form of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceGetItem()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 but without checking that 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceCheck(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is true and without adjustment for negative indices. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.3
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceFastGETSIZE
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the length of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, assuming that 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 was returned by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceFast()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and that 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is not 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

. The size can also be gotten by calling 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceSize()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, but 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
cfunction
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PySequenceFastGETSIZE()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is faster because it can assume 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is a list or tuple. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Section

Mapping Protocol 
\begin_inset LatexCommand \label{mapping}

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyMappingCheck
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if the object provides mapping protocol, and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 otherwise. This function always succeeds. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyMappingLength
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns the number of keys in object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on success, and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. For objects that do not provide mapping protocol, this is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

len(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bifuncindex
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

len
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyMappingDelItemString
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, char *key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Remove the mapping for object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 from the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is equivalent to the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

del 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

]
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyMappingDelItem
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Remove the mapping for object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 from the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is equivalent to the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

del 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

]
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyMappingHasKeyString
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, char *key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 On success, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if the mapping object has the key 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 otherwise. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.haskey(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. This function always succeeds. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyMappingHasKey
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, PyObject *key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if the mapping object has the key 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 otherwise. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.haskey(
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. This function always succeeds. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyMappingKeys
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 On success, return a list of the keys in object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. On failure, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.keys()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyMappingValues
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 On success, return a list of the values in object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. On failure, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.values()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyMappingItems
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 On success, return a list of the items in object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, where each item is a tuple containing a key-value pair. On failure, return 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset

. This is equivalent to the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.items()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyMappingGetItemString
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, char *key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return element of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 corresponding to the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python expression 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

]
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyMappingSetItemString
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o, char *key, PyObject *v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Map the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to the value 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 in object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on failure. This is the equivalent of the Python statement 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
samp
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

[
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

key
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

] = 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Section

Iterator Protocol 
\begin_inset LatexCommand \label{iterator}

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

There are only a couple of functions specifically for working with iterators.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyIterCheck
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return true if the object 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports the iterator protocol. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject*
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyIterNext
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Return the next value from the iteration 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. If the object is an iterator, this retrieves the next value from the iteration, and returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 with no exception set if there are no remaining items. If the object is not an iterator, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
exception
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

TypeError
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is raised, or if there is an error in retrieving the item, returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
NULL
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

 and passes along the exception. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

To write a loop which iterates over an iterator, the C code should look something like this:
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

 PyObject *iterator = PyObjectGetIter(obj); PyObject *item;
\end_layout

\begin_layout Standard

if (iterator == NULL) 
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

 /* propagate error */ 
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

while (item = PyIterNext(iterator)) 
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

 /* do something with item */ ... /* release reference when done */ PyDECREF(item); 
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

PyDECREF(iterator);
\end_layout

\begin_layout Standard

if (PyErrOccurred()) 
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

 /* propagate error */ 
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 else 
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

 /* continue doing useful work */ 
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Section

Buffer Protocol 
\begin_inset LatexCommand \label{abstract-buffer}

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectAsCharBuffer
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *obj, const char **buffer, int *bufferlen
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns a pointer to a read-only memory location useable as character- based input. The 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

obj
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 argument must support the single-segment character buffer interface. On success, returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, sets 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

buffer
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to the memory location and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

bufferlen
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to the buffer length. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and sets a 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
exception
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

TypeError
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on error. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1.6
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectAsReadBuffer
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *obj, const void **buffer, int *bufferlen
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns a pointer to a read-only memory location containing arbitrary data. The 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

obj
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 argument must support the single-segment readable buffer interface. On success, returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, sets 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

buffer
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to the memory location and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

bufferlen
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to the buffer length. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and sets a 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
exception
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

TypeError
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on error. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1.6
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectCheckReadBuffer
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 if 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

o
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 supports the single-segment readable buffer interface. Otherwise returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

2.2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{cfuncdesc}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

int
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObjectAsWriteBuffer
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

PyObject *obj, void **buffer, int *bufferlen
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 Returns a pointer to a writeable memory location. The 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

obj
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 argument must support the single-segment, character buffer interface. On success, returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

0
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, sets 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

buffer
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to the memory location and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
var
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

bufferlen
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 to the buffer length. Returns 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

-1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and sets a 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
exception
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

TypeError
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 on error. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
versionadded
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1.6
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{cfuncdesc}
\end_layout

\end_inset

 
\end_layout

\end_body
\end_document
