\chapter{Tutorial}
\label{cha:tutorial}
\index{tutorial}

\begin{quote}
This chapter provides a tutorial for \PYPEDAL{}.  The sample pedigree files may be found in the directory \texttt{} in the distribution. \footnote{Please let me know of any additions to this tutorial that you feel would be helpful.}
\end{quote}

We are going to start the actual tutorial in this chapter.  First, however, we will describe some key concepts that will help you work successfully with \PYPEDAL{}.  You can find a more detailed explanation of \PYPEDAL{} components in chapter \ref{cha:api}.

\section{A Few Important Concepts}
To make the most of \PYPEDAL{} you, the user, need to have a solid understanding of your dataset as well as of the \PYPEDAL{} API.  While Python is an object-oriented programming language, \PYPEDAL{} is at heart a procedural tool.  One of the exceptions to this rule is what \PYPEDAL{} terms a pedigree, which is a Python list containing Animal() objects.  The first step in most \PYPEDAL{} analyses is to read your pedigree into \PYPEDAL{} from a textfile.  After that, you will spend most of your time passing your pedigree from one procedure to another.  But always remember that the elements in the pedigree are objects!


\section{A Gentle Introduction to PyPedal}
For this tutorial we are going to use a sample pedigree from Hartl and Clark \cite{HartlClark1989a} (Figure 5, p. 242).  The pedigree is provided as \textbf{hartl.ped} in the distribution in the \texttt{tutorial} subdirectory,  There is also an accompanying Python program, \textbf{hartl.py}.

\subsection{The Anatomy of a Pedigree File}
Obviously you need a pedigree file in order to work with \PYPEDAL{}.  There are a couple of things that you need to know about pedigree files and at least one thing that is helpful to know.  Pedigree files must contain a format code, and the format code \textbf{must} precede the first animal record.  A complete list of pedigree codes appears in section \ref{sec:pedigree-format-codes}.  Each animal record must appear on a separate line in the pedigree file.  An animal record consists of at least an animal ID, a sire ID, and a dam ID; the IDs are separated by a delimiter, usually a comma or a space.  More information may be required on a linde depending on the pedigree format used.  Missing parents should be coded as `0'.  Parents do not need to have their own entry in the pedigree if THEIR parents are unknown; the \texttt{preprocess()} procedure is clever enough to add the needed records automatically.  Comment lines, which begin with `\#', may appear anywhere in the file; they are ignored by the preprocessor.
\begin{verbatim}
# Great tit pedigree from Hartl and Clark (1989), figure 5, p. 242.
# Used in PyPedal tutorial.
% asd
1 0 0
2 0 0
3 0 0
4 1 2
5 1 2
6 3 4
7 3 4
8 5 0
9 0 6
10 7 0
11 8 0
12 9 11
13 12 7
14 10 11
15 13 14
\end{verbatim}
This pedigree contains fifteen animals, including three founders (animals with neither parent known), in the familiar 'animal sire dam' format.

\subsection{The Anatomy of a Program}
The \textbf{hartl.ped} program is fairly simple, but it demonstrates some of the things that you can easily do with \PYPEDAL{}.  Please note that while I have placed these comamnds in a file, you can also walk through the steps using the Python command line.  Most of the print statements are there to provide feedback while the program is running.  It is not a big deal with a small pedigree, but it is nice to know that something is happening when you throw a large pedigree at \PYPEDAL().  I have put in line numbers for ease os reference, but if you are working along with the tutorial at the command line you should not type in the line numbers.

\begin{verbatim}
001 print 'Starting pypedal.py at %s' % asctime(localtime(time()))
002 print '\tPreprocessing pedigree at %s' % asctime(localtime(time()))
003 example = preprocess('hartl.ped',sepchar=' ')
004 example = renumber(example,'example',io='yes')
005 print '\tCalling set_ancestor_flag at %s' % asctime(localtime(time()))
006 set_ancestor_flag(example,'example',io='yes')
007 print '\tCollecting pedigree metadata at %s' % asctime(localtime(time()))
008 example_meta = Pedigree(example,'example.ped','example_meta')
009 print '\tCalling a_effective_founders_lacy() at %s' % asctime(localtime(time()))
010 a_effective_founders_lacy(example,filetag='example')
011 print '\tCalling a_effective_founders_boichard() at %s' % asctime(localtime(time()))
012 a_effective_founders_boichard(example,filetag='example')
013 print '\tCalling a_effective_ancestors_definite() at %s' % asctime(localtime(time()))
014 a_effective_ancestors_definite(example,filetag='example')
015 print '\tCalling a_effective_ancestors_indefinite() at %s' % asctime(localtime(time()))
016 a_effective_ancestors_indefinite(example,filetag='example',n=10)
017 print '\tCalling related_animals() at %s' % asctime(localtime(time()))
018 list_a = related_animals(example[14].animalID,example)
019 print list_a
020 print '\tCalling related_animals() at %s' % asctime(localtime(time()))
021 list_b = related_animals(example[9].animalID,example)
022 print list_b
023 print '\tCalling common_ancestors() at %s' % asctime(localtime(time()))
024 list_r = common_ancestors(example[14].animalID,example[9].animalID,example)
025 print list_r
026 print 'Stopping pypedal.py at %s' % asctime(localtime(time()))
\end{verbatim}

\subsection{Reading PyPedal Output}
\begin{verbatim}
Starting pypedal.py at Mon Apr 19 15:28:53 2004
        Preprocessing pedigree at Mon Apr 19 15:28:53 2004
        Calling set_ancestor_flag at Mon Apr 19 15:28:53 2004
        Collecting pedigree metadata at Mon Apr 19 15:28:53 2004
PEDIGREE example_meta (example.ped)
        Records:                15
        Unique Sires:           9
        Unique Dams:            7
        Unique Gens:            1
        Unique Years:           1
        Unique Founders:        3
        Pedigree Code:          asd
        Calling inbreeding() at Mon Apr 19 15:28:53 2004
{1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 0.015625, 13: 0.078125, 14: 0.015625, 15: 0.14453125}
        Calling a_effective_founders_lacy() at Mon Apr 19 15:28:53 2004
============================================================
animals:        15
founders:       3
descendants:    12
f_e:            7.205
============================================================
        Calling a_effective_founders_boichard() at Mon Apr 19 15:28:53 2004
============================================================
animals:        15
founders:       3
descendants:    12
f_e:            5.856
============================================================
        Calling a_effective_ancestors_definite() at Mon Apr 19 15:28:53 2004
============================================================
animals:        15
founders:       0
descendants:    15
f_a:            0.000
============================================================
        Calling a_effective_ancestors_indefinite() at Mon Apr 19 15:28:53 2004
------------------------------------------------------------
WARNING: (pyp_metrics/a_effective_ancestors_indefinite()): Setting n (10) to be equal to the actual number of founders (0) in the pedigree!
============================================================
animals:        15
founders:       0
descendants:    15
f_l:            0.000
f_u:            1.000
============================================================
        Calling related_animals() at Mon Apr 19 15:28:53 2004
[15, 13, 7, 3, 4, 1, 2, 12, 9, 6, 11, 8, 5, 14, 10]
        Calling related_animals() at Mon Apr 19 15:28:53 2004
[10, 7, 3, 4, 1, 2]
        Calling common_ancestors() at Mon Apr 19 15:28:53 2004
[1, 2, 3, 4, 7, 10]
Stopping pypedal.py at Mon Apr 19 15:28:53 2004
\end{verbatim}
