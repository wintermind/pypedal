\appendix
\addcontentsline{toc}{chapter}{Appendices}
\chapter{Example Programs}
A number of example programs are distributed with \PyPedal{}. Table \ref{tbl:examples-program-list} provides the name of each file, the configuration and pedigree files used by those programs, and a brief description of the concepts and techniques presented.
\begin{center}
    \tablecaption{Example programs distributed with \PyPedal{}.}
    \tablefirsthead{\hline Program Name & Configuration File & Pedigree File & Description \\ \hline}
    \tablehead{\hline Program Name & Configuration File & Pedigree File & Description \\ \hline}
    \tabletail{\hline \multicolumn{4}{l}{\small\sl continued on next page} \\ \hline}
    \tablelasttail{\hline}
    \label{tbl:examples-program-list}
    \begin{xtabular}{l|p{1in}|p{1in}|p{3in}}
    new\_amatrix.py & new\_amatrix.ini & new\_amatrix.ped & Create, save, load, and view information about NewAMatrix objects \\
    new\_classes.py & new\_classes.ini & boichard2.ped & ??? \\
    new\_db.py & new\_db.ini & hartlandclark.ped & Loading a pedigree into SQLite and creating a report of mean inbreeeding by birth year \\
    new\_doug.py & new\_doug.ini & doug.ped & Reading a pedigree in which names are strings, drawing pedigrees \\
    new\_format.py & new\_format.ini & boichard2a.ped & Reading a pedigree using the `skip column' format code (Z), printing pedigree metadata \\
    new\_graphics.py & new\_graphics.ini & boichard2.ped & Use of a number of routines from \module{pyp_graphics} \\
    new\_hartl.py & new\_hartl.ini & hartlandclark.ped & Demonstrates use of \function{pyp_graphics.draw_pedigree()} \\
    new\_ids.py & new\_ids.ini & new\_ids2.ped & Demonstrates reading tab-delimited files, using strings as animal IDs, overriding the default missing parent code, printing animal records \\
    new\_inbreeding.py & new\_inbreeding.ini & new\_renumbering.ped & Calculating coefficients of inbreeding \\
    new\_inbreeding2.py & new\_inbreeding2.ini, new\_inbreeding2multiple.ini & new\_renumbering.ped, horse.ped & Advanced .ini file techniques, computations on extremely inbred animals, calculation of summary statistics for coefficients of relationship \\
    new\_jbc.py & new\_jbc.ini & new\_ids2.ped & Using \function{pyp_jbc.color_pedigree()} to produce a weighted, colored pedigree \\
    new\_lacy.py & new\_lacy.ini, new\_format.ini & new\_lacy.ped, boichard2a.ped & Calculating effective ancestor and founder numbers \\
    new\_methods.py & new\_format.ini & boichard2a.ped & Use of \function{pyp_metrics.related\_animals()} and \function{pyp_metrics.common\_ancestors()} \\
    new\_networkx.py & new\_networkx.ini & generations.ped & Use of [algebraic] graph functions \\
    new\_options.py & new\_options.ini & new\_lacy.ped & Use of the configuration files \\
    new\_renumbering.py & new\_renumbering.ini & new\_renumbering.ped & Renumbering a pedigree, calculating inbreeding, pedigree drawing \\
    new\_reporting.py & new\_reporting.ini & new\_renumbering.ped & Use of reporting functions \\
    new\_simulate.py & new\_simulate.ini & None & Demonstrates how to create a random pedigree and produce a drawing of that pedigree. \\
    \end{xtabular}
\end{center}



\chapter{GEDCOM File Handling}
\label{GEDCOM}
\PyPedal{} is capable of importing from, and exporting to, GEDCOM 5.5 files using a subset
of data record and tag types from the standard (Table 
\ref{tbl:gedcom-supported-records-and-tags-import,tbl:gedcom-supported-records-and-tags-export}).
Most of the information that can be
 exchanged in GEDCOM files has no direct use in \PyPedal{}, so important information from \PyPedal{}'s point-of-view is not lost. However, it's important to note that \textbf{\PyPedal{}'s GEDCOM import and export is lossy}! This means that information in a GEDCOM file is lost when importing the file, and data from \PyPedal{} pedigrees is lost when exporting. There are many free and commercial packages for doing human genealogy that take full advantage of GEDCOM, so you might want to look at one if you need more advanced GEDCOM support than \PyPedal{} provides.
\begin{center}
    \tablecaption{GEDCOM 5.5 data records and tags imported by PyPedal{}.}
    \tablefirsthead{\hline Data Record Type & Supported Tags & Description\footnote{} \\ \hline}
    \tablehead{\hline Data Record Type & Supported Tags & Description\footnote{} \\ \hline}
    \tabletail{\hline \multicolumn{3}{l}{\small\sl continued on next page} \\ \hline}
    \tablelasttail{\hline}
    \label{tbl:gedcom-supported-records-and-tags-import}
    \begin{xtabular}{l|p{1in}|p{3in}}
    Fam_Record & {FAM} & Alphanumeric with underscores; formed from parent IDs \\
     & {HUSB} & Sire, if known \\
     & {WIFE} & Dam, if known \\
     & {CHIL} & Pointer to Individual_Record (one record per child) \\
    Individual_Record & {INDI} & Individual ID \\
     & SEX & M, F, or U (unknown) \\
     & NAME & Individual's name, if known \\
     & BIRT & Indicates that a birth date or year follows \\
     & DATE & Birth date or birth year, if known \\
     & FAMC & Pointer to family to which this individual belongs \\
     & FAMS & Pointer to family in which this individual is a parent \\
    \end{xtabular}
\end{center}
The list of recognized tags is hard-coded in a list named \var{known\_tags} in \function{pyp\_io.load\_from\_gedcom()}.
\begin{center}
    \tablecaption{GEDCOM 5.5 data records and tags exported by PyPedal{}.}
    \tablefirsthead{\hline Data Record Type & Supported Tags & Description\footnote{} \\ \hline}
    \tablehead{\hline Data Record Type & Supported Tags & Description\footnote{} \\ \hline}
    \tabletail{\hline \multicolumn{3}{l}{\small\sl continued on next page} \\ \hline}
    \tablelasttail{\hline}
    \label{tbl:gedcom-supported-records-and-tags-export}
    \begin{xtabular}{l|p{1in}|p{3in}}
    Header & {HEAD} & --- \\
     & {SOUR} & {PYPEDAL} \\
     & {VERS} & V2.0 \\
     & {CORP} & {USDA-ARS-BA-ANRI-AIPL} \\
     & {DEST} & {PYPEDAL} \\
     & {DATE} & Timestamp from time of file creation \\
     & {FILE} & Filename provided by user \\
     & {GEDC} & --- \\
     & {VERS} & {VERS 5.5} \\
     & {FORM} & Lineage-Linked \\
     & {CHAR} & {ASCII} \\
    Fam_Record & {FAM} & Alphanumeric with underscores; formed from parent IDs \\
     & {HUSB} & Sire, if known \\
     & {WIFE} & Dam, if known \\
     & {CHIL} & Pointer to Individual_Record (one record per child) \\
    Individual_Record & {INDI} & Individual ID \\
     & SEX & M, F, or U (unknown) \\
     & NAME & Individual's name, if known \\
     & BIRT & Indicates that a birth date or year follows \\
     & DATE & Birth date or birth year, if known \\
     & FAMC & Pointer to family to which this individual belongs \\
     & FAMS & Pointer to family in which this individual is a parent \\
    \end{xtabular}
\end{center}
Some tags have slightly different connotatios in \PyPedal{} than in {GEDCOM}. For example, in human genealogy marriages are important events, but that is not the case in animal pedigrees. \PyPedal{} creates family records only for unique mating pairs, and marriage information is lost when importing a {GEDCOM} file. Similarly, no marriage information is exported, and you will not see any family records containing only HUSB and WIFE tags. Founders (animals with both parents unknown) will have individual records but no family records. The default birth year used by \PyPedal{} is 1900; if you do not override that value then individuals with birth years of 1900 will not have BIRT/DATE tags written to their individual record. The same is true of default birth dates (01011900).

Importation is done by reading the {GEDCOM} file, parsing out the supported tags into ``family'' and ``individual'', and using Python dictionaries (hash tables) to map everything down to individual records. Those individual records are then written to a file, the pedigree format string and pedfile variables are updated for the new file. That file is then loaded automatically. The downside is that you end up with two copies of each pedigree file, but disc space is cheap. I wonâ€™t add an option for automatic deletion of the original {GEDCOM} file becuase of the lossiness of the import procedure.

The export process is uncoupled from the import process. You can export any pedigree 
that \PyPedal{} can read as a {GEDCOM} file regardless of the original source. Perhaps
some human types will be interested in some of the calculations that \PyPedal{} can do,
or perhaps some dog people will do something deviant, such as exporting to {GEDCOM} so
that they can use GRAMPS or something like that to manipulate their data. Who knows. Anyway, \PyPedal{} supports two-way data flow.