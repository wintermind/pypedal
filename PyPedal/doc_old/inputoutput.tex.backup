\chapter{Input and Output}
\label{cha:inputoutput}
\begin{quote}
The only legitimate use of a computer is to play games. --- Eugene Jarvis
\end{quote}
\section{Overview}\label{sec:io-overview}
Getting data into and out of programs, while extremely important to end-users, is often challenging. \PyPedal{} is able to load pedigrees from, and save them to, from a number of different sources. A list of supported input and output methods may be found in Table \ref{tbl:io-methods}.
\begin{center}
    \tablecaption{\PyPedal{} input and output methods.}
    \tablefirsthead{\hline Direction & Source & Description \\ \hline}
    \tablehead{\hline Direction & Source & Description \\ \hline}
    \tabletail{\hline \multicolumn{3}{l}{\small\sl continued on next page} \\ \hline}
    \tablelasttail{\hline}
    \label{tbl:io-methods}
    \begin{xtabular}{l|p{1in}|p{3in}}
    Input & db & Load an ASDx-formatted data from an SQLite database \\
     & fromgraph & Load a pedigree from an instance of an XDiGraph object (not a file) \\
     & gedcomfile & Load a pedigree from a GEDCOM 5.5 file \\
     & graphfile & Load a pedigree from an adjacency list using the read_adjlist() function from the NetworkX module \\
     & simulate & Simulate a pedigree rathen that loading it from a file \\
     & textstream & Load a pedigree from a string contaiing animal records \\
    Output & save & Save a pedigree to a user-specified file \\
     & savedb & Save a pedigree to a database table \\
     & savegedcom & Save a pedigree to a GEDCOM 5.5 file \\
     & savegraph & Save a pedigree to a file as an adjacency list \\
    \end{xtabular}
\end{center}
It has evolved over time that the input methods are implemented as cases of \samp{pedsource} in the \method{NewPedigree::load()} method, while output methods are implemented as individual methods of \method{NewPedigree}. While it is quite straightforward to add new methods for pedigree output, it is trickier to add new input sources. The greater difficulty in adding new input sources is largely attributable to the mysterious workings of the \method{NewPedigree::preprocess()} method, which walks through input line-by-line to load the pedigree and perform a number of integrity checks. Once the data are loaded into a \method{NewPedigree} object it is easy to output them because there is no need to check the integrity of the pedigree and relationships among the records in the pedigree. If you want to implement a new input source the sanity-saving way to go is to get the data into a list that you can pass to \method{preprocess()}; \method{preprocess()} can then walk the list as it would walk through the  lines of an input file.

Database operations are discussed in their own section at the end of this chapter.

\section{Input}\label{sec:io-input}\index{input}
The process of data input hsa been made as simple as is reasonably possible, but it is ultimately the responsibility of the user to prepare their data. Most people will load their data from a simple text file, with one pedigree entry per line. \index{input!integrity checks}A number of pedigree integrity checks are performed when the data are loaded. First, the pedigree format string (Section \ref{sec:pedigree-format-codes}) is checked for validity and compared to a line of data to make sure that the specfied number of colums of data exist. Once that check is passed individual records are loaded and checked one at a time. As individual records are vvalidated they are added to the pedigree. Duplicate records are eliminated, parents that appear in the pedigree but do not have their own record in the inpur data are added to the pedigree, and sexes are checked (animals cannot appear as both sires and dams). If animal IDs are strings they are hashed to get numeric IDs for use in pedigree reordering and renumbering.

If you used an earlier version of \PyPedal{} you may have added a pedigree format string to your pedigree file. You do not need to include that string in the current version of \PyPedal{}, and if \method{preprocess()} sees one while reading a pedigree file it will ignore it. You may include comment lines in your file as well; they will also be ignored.

\subsection{Graph Objects}\label{sec:io-input-xdigraph}\index{input!graph objects}
Pedigrees can be represented as a type of mathematical object called a directed graph (digraph; not to be confused with visualizations of data). The \class{NetworkX} module provides Python tools for working with digraphs, and \PyPedal{} provides a convenient way for loading a pedigree from an instance of an \class{{XD}i{G}raph} object.
\begin{verbatim}
example = pyp_newclasses.loadPedigree(optionsfile='new_networkx.ini')
ng = pyp_network.ped_to_graph(example)
options = {}
options['pedfile'] = 'dummy'
options['pedformat'] = 'asd'
example2 = pyp_newclasses.loadPedigree(options,pedsource='graph',pedgraph=ng)
example2.metadata.printme()
\end{verbatim}
You can see from the printout of the metadata from the new pedigree, \samp{example2}, that the graph \samp{ng} was successfully converted to a \class{NewPedigree} object.
\begin{verbatim}
Metadata for  Testing fromgraph() (dummy)
Records:                13
Unique Sires:           3
Unique Dams:            4
Unique Gens:            1
Unique Years:           1
Unique Founders:        5
Unique Herds:           1
Pedigree Code:          asd
\end{verbatim}
When considering the utility of such tools it might be helpful to recall that \PyPedal{} was written by and for use in scientific research. Perhaps that will allow the author to be forgiven a multitude of sins.

\subsection{{GEDCOM} Files}\label{sec:io-input-gedcom}\index{input!GEDCOM files}
A thorough description of support for {GEDCOM} files may be found in Appendix \ref{GEDCOM}.

\subsection{Text Files}\label{sec:io-input-text-files}\index{input!text files}
Most users will load their pedigrees from simple text files. As an example, consider a large dog pedigree, an excerpt of which is presented below.
\begin{verbatim}
# dogID,fatherID,motherID,gender,born
64 66 67 2 1979
63 64 65 1 1982
62 191 195 2 1982
61 64 65 2 1982
...
\end{verbatim}
This pedigree can be loaded using this short program:
\begin{verbatim}
options = {}
options['pedfile'] = 'dog.ped'
options['pedname'] = 'A Large Dog Pedigree'
options['pedformat'] = 'asdgb'
if __name__ == '__main__':
    test = pyp_newclasses.loadPedigree(options)
\end{verbatim}
There are numerous examples of loading pedigrees from text files throughout this manual.

\subsection{Text Streams}\label{sec:io-input-text-streams}\index{input!text streams}
There are some use cases, such as web services, for which it may be desirable to load pedigrees from strings rather than from files. This is done by passing the \function{pedsource}\index{pedsource} keyword to \function{pyp_newclasses.loadPedigree} with a value of \samp{textstream}, along with a string named \samp{pedstream}:
\begin{verbatim}
options = {}
options['pedfile'] = ''
options['messages'] = 'verbose'
options['pedformat'] = 'ASD'

if __name__ == "__main__":
    pedstream = 'a1,s1,d1\na2,s2,d2\na3,a1,a2\n'
    test = pyp_newclasses.loadPedigree(options,pedsource='textstream',pedstream=pedstream)
\end{verbatim}
Only ASD-formatted pedigrees can be loaded this way, individual IDs are separated with commas, and successive records are separated by newlines. These restrictions are hard-coded into the \method{NewPedigree::load()} method. All records must contain a newline, including the last record in the string! You must also set the \samp{pedfile} option to some value, even if that value is just an empty string as in the example.

The expected use case is that the pedigree would be retrieved from a database, and the result set from the SQL query converted into a string. There is an upper bound on the size of pedigree that can be loaded from a stream based on the physical memory available on your platform, and extremely large pedigrees should be loaded from a text file. 

\section{Output}\label{sec:io-output}\index{output}
\subsection{{GEDCOM} Files}\label{sec:io-output-gedcom}\index{output!GEDCOM files}
A thorough description of {GEDCOM} file exportation may be found in Appendix \ref{GEDCOM}.

\subsection{Graph Objects}\label{sec:io-output-xdigraph}\index{output!graph objects}
The \method{NewPedigree::savegraph()} save a pedigree to a file as an adjacency list, which is a commonly-used format for describing digraphs. If the pedigree has already been converted to a digraph pass it using the \var{pedgraph} argument; otherwise, the method will call the appropriate converter:
\begin{verbatim}
test.savegraph(pedoutfile='test.adj')
\end{verbatim}
The file \samp{test.adj} has the following comments:
\begin{verbatim}
# sqlite.py
# GMT Tue Mar  4 20:38:52 2008
# Text Stream
1 5
2 6
3 5
4 6
5 7
6 7
7
\end{verbatim}
This example demonstrates that there can be a considerable loss of information when going from a \PyPedal{} pedigree to some other way of representing the pedigree, such as a graph.

\subsection{Text Files}\label{sec:io-output-text-files}\index{output!text files}
The \method{NewPedigree::save()} method writes a \PyPedal{} pedigree to a user-specified file with either the format specified in the pedigree format string (default) or a format including all variables in the pedigree (\samp{outformat='l'}). Either the original (default) or renumbered (\samp{idformat='r'}) IDs can be used for animal, sire, and dam IDs. In the following example all variables are written to a file named \samp{all\_data.ped} using the same IDs as in the original file:
\begin{verbatim}
test.save(filename='all_data.ped',outformat='l',idformat='o')
\end{verbatim}
\method{NewPedigree::save()} tries never to overwrite your data. If you do not pass a filename argument a file whose name is derived from, but not the same as, the original pedigree filename will be used. The string \samp{\_saved} will be appended to the filename in order to distinguish it from the original pedigree file.

\subsection{Text Streams}\label{sec:io-output-text-streams}\index{output!text streams}
\method{NewPedigree::tostream()} returns a text stream from an instance of a \class{NewPedigree} object. The text stream contains an ASD-formatted pedigree as a string in which individual IDs are separated by commas and successive records are separated by newlines.
\begin{verbatim}
>>> pedstream = 'a1,s1,d1\na2,s2,d2\na3,a1,a2\n'
>>> test = pyp_newclasses.loadPedigree(options,pedsource='textstream',pedstream=pedstream)
>>> pedstream2 = test.tostream()
>>> print pedstream2
'd1,0,0\nd2,0,0\ns1,0,0\ns2,0,0\na2,s2,d2\na1,s1,d1\na3,a1,a2\n'
\end{verbatim}
Note that in this example the input and output text streams differ because the input stream did not include pedigree entries for all animals in the pedigree (for example, sire \samp{s1}). Recall that \PyPedal{} adds missing entries for parents when the pedigree is loaded.

\section{Databases}\label{sec:io-databases}\index{databases}
Getting data into and out of programs, while extremely important to end-users, is often challenging. \PyPedal{} is able to load pedigrees from, and save them to, from a number of different sources. A list of database-related keywiords may be found in Table \ref{tbl:db-parms}.
\begin{center}
    \tablecaption{Database parameters.}
    \tablefirsthead{\hline Parameter & Default & Description \\ \hline}
    \tablehead{\hline Parameter & Default & Description \\ \hline}
    \tabletail{\hline \multicolumn{3}{l}{\small\sl continued on next page} \\ \hline}
    \tablelasttail{\hline}
    \label{tbl:db-parms}
    \begin{xtabular}{l|p{1in}|p{3in}}
    database\_debug & False & Toggle debugging messages in the database module on and off. \\
    database\_host & 'localhost' & The server on which the database is running. \\
    database\_name & 'pypedal' & The name of the database to be used. \\
    database\_passwd & 'anonymous' & The password needed to connect to your database. \\
    database\_port & '' & The port on which your databse is listening for connections (needed only for Postgres). \\
    database\_table & 'filetag' (See: Table \ref{tbl:options}) & The name of the database table to which the current pedigree will be written. \\
    database\_type & 'sqlite' & The type of database you are using ('mysql'|'postgres'|'sqlite'). \\
    database\_user & 'anonymous' & The name of a user with access rights to your database.  \\
    \end{xtabular}
\end{center}

\subsection{Input from Databases}\label{sec:io-input-database}\index{input!databases}
\PyPedal{} can load ASDx-formatted pedigrees from an SQLite database using \samp{pedsource='db'}. The pedigree will be loaded from the database and table specified in the \var{database\_name} and \var{dbtable\_name} variables. Consider the following example:
\begin{verbatim}
test = pyp_newclasses.loadPedigree(options,pedsource='db')
test.metadata.printme()
\end{verbatim}
This produces the output:
\begin{verbatim}
Metadata for  DB Stream ()
    Records:                7
    Unique Sires:           3
    Unique Dams:            3
    Unique Gens:            1
    Unique Years:           1
    Unique Founders:        4
    Unique Herds:           1
    Pedigree Code:          ASDx
\end{verbatim}
Note that user-supplied values of the pedigree format string will be over-written by the \method{load()} method and do not affect database processing. Database importation is hard-coded to accept only pedigrees in that format.

\index{databases!new input sources}It is possible to load pedigrees from a databse with a format different than that exected by \PyPedal{}, but it requires that you make changes to the \class{NewPedigree} class's \method{load} method. Consider the database-loading code that is located at about line 250 of \texttt{pyp_newclasses.py}:
\begin{verbatim}
251  elif pedsource == 'db':
252      self.kw['pedformat'] = 'ASDx'
253      self.kw['sepchar'] = ','
...
259      try:
260          # Connect to the database
261          if pyp_db.doesTableExist(self):
262            conn = pyp_db.connectToDatabase(self)
263              if conn:
264                  sql = 'SELECT * FROM %s' % ( self.kw['database_table'] )
265                  dbstream = conn.GetAll(sql)
\end{verbatim}
In order to load data from your own database you must change the pedigree format string
on line 252 to match the pedigree you want to load (see Table
\ref{tbl:pedigree-format-codes} for a list of pedigree format codes). You then need to
change the SQL statement on line 264 to match the column names in your database and the
order of fields in your pedigree format string. The animal, sire, and dam IDs,
respectively, should always  be the first three columns in your records. The query
results are stored as a list of tuples in \var{dbstream} and will be unpacked in the
\method{preprocess} method (\textit{cf.} line 864).

Please note that while I will try and answer questions about the way in which \PyPedal{}
handles loading pedigrees from databases, I cannot answer detailed questions about 
databases to which I do not ave access. You should carefully test your custom queries in
SQL to ensure that they are working correctly before adding them to \PyPedal{}. Also,
please check your pedigree format string to make sure that it matches your query.

\subsection{Output to Databases}\label{sec:io-output-database}\index{output!databases}
\PyPedal{} can write \class{NewPedigree} pedigrees to ASDx-formatted SQLite tables using the \method{NewPedigree::savedb()} method. The following program will result in the creation of a table named \samp{test\_save} in the database \samp{test\_pypedal\_save}.
\begin{verbatim}
test.kw['database_name'] = 'test_pypedal_save'
test.kw['dbtable_name'] = 'test_save'
test.savedb()
\end{verbatim}
The pedigree is saved to the database and table specified in the \var{database\_name} and \var{dbtable\_name} variables. If the specified table already exists then the records from the current pedigree will be added to the table. If you want to overwrite the existing database then you need to pass \samp{drop=True} in the call to method{savedb}:
\begin{verbatim}
test.savedb(drop=True)
\end{verbatim}
While this may strike some users as unexpected behavior it is based on the idea that you should never lose data unexpectedly. If you use only the defaults you will never lose data. However, if you try and save a renumbered pedigree on top of another renumbered pedigree you will run into problems because animal IDs are used as primary keys, and you will have constraint violations.

\index{databases!new output destinations}It is possible to save pedigrees to a databse
with a format different than that exected by \PyPedal{}, but it is a little harder than
changeing pedigree input. Changing the output table requires that you change the
\class{NewPedigree} class's \method{savesb} method. Consider the code that begins on or
about line 590 of \texttt{pyp_newclasses.py} in \method{savesb}:
\begin{verbatim}
591  sql = 'create table %s ( \
592      animalName   varchar(128) primary key, \
593      sireName     varchar(128), \
594      damName      varchar(128), \
595      sex          char(1) \
596      );' % ( self.kw['database_table'] )
\end{verbatim}
You need to rewrite this statement to add or remove columns; the SQL for a tavble that 
includes all fields in a \class{NewAnimal} object may be found in the 
\function{createPedigreeTable} function of the \module{pyp\_db module}. Note that not 
every field in a \class{NewAnimal} object has a corresponding pedigree format code. 
Consult Table \ref{sec:pedigree-format-codes} for appropriate codes.

Once you've updated the SQL used to create your custom pedigree table you will also need to change the code which prepares the input for writing to the database. This code is found on or about about line 617 in \method{savesb}:
\begin{verbatim}
617  sql = "INSERT INTO %s ( animalName, sireName, damName, sex ) VALUES ('%s', '%s', '%s', '%s')" % ( self.kw['database_table'], an, si, da, p.sex )
\end{verbatim}
Note that you will need to make appropriate casts yourself. For example, you will want 
to cast things that are stored as integers or reals to make sure that you don't violate 
a column constraint. You must enclose strings in single-quotation marks ('') yourself. 

By default \PyPedal{} saves pedigrees in \samp{ASD} format. If you want to save your pedigree in \samp{asd} format then you will need to change the code on or about line 610 from:
\begin{verbatim}
610  an = p.name
611  si = p.sireName
612  da = p.damName
\end{verbatim}
to:
\begin{verbatim}
610  an = p.animalID
611  si = p.sireID
612  da = p.damID
\end{verbatim}
It is better to add a new method supporting your output format to \class{NewAnimal}   rather than changing the \method{savedb} method.