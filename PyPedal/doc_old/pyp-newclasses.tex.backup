pyp\_newclasses\index[func]{pyp_newclasses} contains the new class structure that is used by PyPedal 2.0.0. It includes a master pedigree class, a NewAnimal() class, a PedigreeMetadata() class, and a NewAMatrix class.

\subsection*{Module Contents}

\begin{description}
\item[\textbf{LightAnimal(locations, data, mykw)} (class)]\index[func]{pyp_newclasses!LightAnimal}
The LightAnimal() class is holds animals records read from a pedigree file. It is a lightweight class whose objects use much less memory than \class{NewAnimal} objects.
For more information about this class, see \emph{The LightAnimal Class}

\item[\textbf{NewAMatrix(kw)} (class)]\index[func]{pyp_newclasses!NewAMatrix}
NewAMatrix provides an instance of a numerator relationship matrix as a Numarray array of floats with some convenience methods.
For more information about this class, see \emph{The NewAMatrix Class}

\item[\textbf{NewAnimal(locations, data, mykw)} (class)]\index[func]{pyp_newclasses!NewAnimal}
The NewAnimal() class is holds animals records read from a pedigree file.
For more information about this class, see \emph{The NewAnimal Class}

\item[\textbf{NewPedigree(kw)} (class)]\index[func]{pyp_newclasses!NewPedigree}
The NewPedigree class is the main data structure for PyP 2.0.0Final.
For more information about this class, see \emph{The NewPedigree Class}

\item[\textbf{PedigreeMetadata(myped, kw)} (class)]\index[func]{pyp_newclasses!PedigreeMetadata}
The PedigreeMetadata() class stores metadata about pedigrees.
For more information about this class, see \emph{The PedigreeMetadata Class}

\item[\textbf{SimAnimal(locations, data, mykw)} (class)]\index[func]{pyp_newclasses!SimAnimal}
The SimAnimal() class is a lightweight animal class that is used by the pedigree simulation routine in \function{pyp_newclasses.simulate}.
For more information about this class, see \emph{The SimAnimal Class}

\item[\textbf{loadPedigree(options='', optionsfile='pypedal.ini')} $\Rightarrow$ integer]
\index[func]{pyp_newclasses!loadPedigree()}
loadPedigree() wraps pedigree creation and loading into a one-step process.  If the user passes both a dictionary and a filename, the dictionary will be used instead of the filename unless the dictionary is empty.
\begin{description}
\item[\emph{options}] Dictionary of pedigree options.
\item[\emph{optionsfile}] File from which pedigree options should be read.
\item[Returns:] An instance of a \class{NewPedigree} object on success, a 0 otherwise.
\end{description}
\end{description}

\subsection*{The LightAnimal Class}
\begin{description}
\item[\textbf{LightAnimal(locations, data, mykw)} (class)]
The LightAnimal() class holds animals records read from a pedigree file. It is a much simpler object than the \class{NewAnimal} object and is intended for use with the graph theoretic routines in \module{pyp\_network}. The only attributes of these objects are: animal ID, sire ID, dam ID, original ID, birth year, and sex.

\item[\textbf{\_\_init\_\_(locations, data, mykw)} $\Rightarrow$ object]\index[func]{pyp_newclasses!LightAnimal!\_\_init\_\_()}
\_\_init\_\_() initializes a LightAnimal() object.
\begin{description}
\item[\emph{locations}] A dictionary containing the locations of variables in the input line.
\item[\emph{data}] The line of input read from the pedigree file.
\item[Returns:] An instance of a LightAnimal() object populated with data
\end{description}

\item[\textbf{pad\_id()} $\Rightarrow$ integer]\index[func]{pyp_newclasses!LightAnimal!pad_id()}
pad\_id() takes an Animal ID, pads it to fifteen digits, and prepends the birthyear (or 1950 if the birth year is unknown). The order of elements is: birthyear, animalID, count of zeros, zeros.
\begin{description}
\item[\emph{self}] Reference to the current LightAnimal() object
\item[Returns:] A padded ID number that is supposed to be unique across animals
\end{description}

\item[\textbf{printme()} $\Rightarrow$ None]\index[func]{pyp_newclasses!LightAnimal!printme()}
printme() prints a summary of the data stored in the LightAnimal() object.
\begin{description}
\item[\emph{self}] Reference to the current LightAnimal() object
\end{description}

\item[\textbf{string\_to\_int(idstring)} $\Rightarrow$ None]\index[func]{pyp_newclasses!LightAnimal!string_to_int()}
string\_to\_int() takes an Animal/Sire/Dam ID as a string and returns a string that can be represented as an integer by replacing each character in the string with its corresponding ASCII table value.

\item[\textbf{stringme()} $\Rightarrow$ None]\index[func]{pyp_newclasses!LightAnimal!stringme()}
stringme() returns a summary of the data stored in the LightAnimal() object as a string.
\begin{description}
\item[\emph{self}] Reference to the current LightAnimal() object
\end{description}

\item[\textbf{trap()} $\Rightarrow$ None]\index[func]{pyp_newclasses!LightAnimal!trap()}
trap() checks for common errors in LightAnimal() objects
\begin{description}
\item[\emph{self}] Reference to the current LightAnimal() object
\end{description}

\end{description}

\subsection*{The NewAMatrix Class}
\begin{description}
\item[\textbf{NewAMatrix(kw)} (class)]
NewAMatrix provides an instance of a numerator relationship matrix as a Numarray array of floats with some convenience methods. The idea here is to provide a wrapper around a NRM so that it is easier to work with. For large pedigrees it can take a long time to compute the elements of A, so there is real value in providing an easy way to save and retrieve a NRM once it has been formed.

\item[\textbf{\_\_init\_\_(self, kw)} $\Rightarrow$ object]\index[func]{pyp_newclasses!NewAMatrix!\_\_init\_\_()}
\_\_init\_\_() initializes a NewAMatrix() object.
\begin{description}
\item[\emph{kw}] A dictionary of options.
\item[Returns:] An instance of a NewAMatrix() object populated with data
\end{description}

\item[\textbf{form\_a\_matrix(pedigree)} $\Rightarrow$ integer]\index[func]{pyp_newclasses!NewAMatrix!form_a_matrix()}
form\_a\_matrix() calls pyp\_nrm/fast\_a\_matrix() or pyp\_nrm/fast\_a\_matrix\_r() to form a NRM from a pedigree.
\begin{description}
\item[\emph{pedigree}] The pedigree used to form the NRM.
\item[Returns:] A NRM on success, 0 on failure.
\end{description}

\item[\textbf{info()} $\Rightarrow$ None]\index[func]{pyp_newclasses!NewAMatrix!info()}
info() uses the info() method of Numarray arrays to dump some information about the NRM. This is of use predominantly for debugging.
\begin{description}
\item[\emph{None}]
\item[Returns:] None
\end{description}

\item[\textbf{load(nrm\_filename)} $\Rightarrow$ integer]\index[func]{pyp_newclasses!NewAMatrix!load()}
load() uses the Numarray Array Function ``fromfile()'' to load an array from a binary file. If the load is successful, self.nrm contains the matrix.
\begin{description}
\item[\emph{nrm\_filename}] The file from which the matrix should be read.
\item[Returns:] A load status indicator (0: failed, 1: success).
\end{description}

\item[\textbf{printme()} $\Rightarrow$ None]\index[func]{pyp_newclasses!NewAMatrix!printme()}
printme() prints the NRM to STDOUT.
\begin{description}
\item[\emph{self}] Reference to the current NewAMatrix() object
\end{description}

\item[\textbf{save(nrm\_filename)} $\Rightarrow$ integer]\index[func]{pyp_newclasses!NewAMatrix!save()}
save() uses the Numarray method ``tofile()'' to save an array to a binary file.
\begin{description}
\item[\emph{nrm\_filename}] The file to which the matrix should be written.
\item[Returns:] A save status indicator (0: failed, 1: success).
\end{description}

\end{description}

\subsection*{The NewAnimal Class}
\begin{description}
\item[\textbf{NewAnimal(locations, data, mykw)} (class)]
The NewAnimal() class is holds animals records read from a pedigree file.

\item[\textbf{\_\_init\_\_(locations, data, mykw)} $\Rightarrow$ object]\index[func]{pyp_newclasses!NewAnimal!\_\_init\_\_()}
\_\_init\_\_() initializes a NewAnimal() object.
\begin{description}
\item[\emph{locations}] A dictionary containing the locations of variables in the input line.
\item[\emph{data}] The line of input read from the pedigree file.
\item[Returns:] An instance of a NewAnimal() object populated with data
\end{description}

\item[\textbf{pad\_id()} $\Rightarrow$ integer]\index[func]{pyp_newclasses!NewAnimal!pad_id()}
pad\_id() takes an Animal ID, pads it to fifteen digits, and prepends the birthyear (or 1950 if the birth year is unknown). The order of elements is: birthyear, animalID, count of zeros, zeros.
\begin{description}
\item[\emph{self}] Reference to the current Animal() object
\item[Returns:] A padded ID number that is supposed to be unique across animals
\end{description}

\item[\textbf{printme()} $\Rightarrow$ None]\index[func]{pyp_newclasses!NewAnimal!printme()}
printme() prints a summary of the data stored in the Animal() object.
\begin{description}
\item[\emph{self}] Reference to the current Animal() object
\end{description}


\item[\textbf{string\_to\_int(idstring)} $\Rightarrow$ None]\index[func]{pyp_newclasses!NewAnimal!string_to_int()}
string\_to\_int() takes an Animal/Sire/Dam ID as a string and returns a string that can be represented as an integer by replacing each character in the string with its corresponding ASCII table value.

\item[\textbf{stringme()} $\Rightarrow$ None]\index[func]{pyp_newclasses!NewAnimal!stringme()}
stringme() returns a summary of the data stored in the Animal() object as a string.
\begin{description}
\item[\emph{self}] Reference to the current Animal() object
\end{description}


\item[\textbf{trap()} $\Rightarrow$ None]\index[func]{pyp_newclasses!NewAnimal!trap()}
trap() checks for common errors in Animal() objects
\begin{description}
\item[\emph{self}] Reference to the current Animal() object
\end{description}

\end{description}

\subsection*{The NewPedigree Class}
\begin{description}
\item[\textbf{NewPedigree(kw)} (class)]
The NewPedigree class is the main data structure for PyP 2.0.0Final.

\item[\textbf{\_\_init\_\_(self, kw)} $\Rightarrow$ object]\index[func]{pyp_newclasses!NewPedigree!\_\_init\_\_()}
\_\_init\_\_() initializes a NewPedigree() object.
\begin{description}
\item[\emph{kw}] A dictionary of options.
\item[Returns:] An instance of a NewPedigree() object populated with data
\end{description}

\item[\textbf{load(pedsource='file')} $\Rightarrow$ None]\index[func]{pyp_newclasses!NewPedigree!load()}
load() wraps several processes useful for loading and preparing a pedigree for use in an analysis, including reading the animals into a list of animal objects, forming lists of sires and dams, checking for common errors, setting ancestor flags, and renumbering the pedigree.
\begin{description}
\item[\emph{renum}] Flag to indicate whether or not the pedigree is to be renumbered.
\item[\emph{alleles}] Flag to indicate whether or not pyp\_metrics/effective\_founder\_genomes() should be called for a single round to assign alleles.
\item[Returns:] None
\end{description}

\item[\textbf{preprocess()} $\Rightarrow$ None]\index[func]{pyp_newclasses!NewPedigree!preprocess()}
preprocess() processes a pedigree file, which includes reading the animals into a list of animal objects, forming lists of sires and dams, and checking for common errors.
\begin{description}
\item[\emph{None}]
\item[Returns:] None
\end{description}

\item[\textbf{printoptions()} $\Rightarrow$ None]\index[func]{pyp_newclasses!NewPedigree!printoptions()}
printoptions() prints the contents of a pedigree's \member{kw} dictionary.
\begin{description}
\item[\emph{None}]
\item[Returns:] None
\end{description}

\item[\textbf{renumber()} $\Rightarrow$ None]\index[func]{pyp_newclasses!NewPedigree!renumber()}
renumber() updates the ID map after a pedigree has been renumbered so that all references are to renumbered rather than original IDs.
\begin{description}
\item[\emph{None}]
\item[Returns:] None
\end{description}

\item[\textbf{save(filename='', outformat='o', idformat='o')} $\Rightarrow$ integer]\index[func]{pyp_newclasses!NewPedigree!save()}
save() writes a PyPedal pedigree to a user-specified file. The saved pedigree includes all fields recognized by PyPedal, not just the original fields read from the input pedigree file.
\begin{description}
\item[\emph{filename}] The file to which the pedigree should be written.
\item[\emph{outformat}] The format in which the pedigree should be written: 'o' for original (as read) and 'l' for long version (all available variables).
\item[\emph{idformat}] Write 'o' (original) or 'r' (renumbered) animal, sire, and dam IDs.
\item[Returns:] A save status indicator (0: failed, 1: success)
\end{description}

\item[\textbf{updateidmap()} $\Rightarrow$ None]\index[func]{pyp_newclasses!NewPedigree!updateidmap()}
updateidmap() updates the ID map after a pedigree has been renumbered so that all references are to renumbered rather than original IDs.
\begin{description}
\item[\emph{None}]
\item[Returns:] None
\end{description}

\end{description}

\subsection*{The PedigreeMetadata Class}
\begin{description}
\item[\textbf{PedigreeMetadata(myped, kw)} (class)]
The PedigreeMetadata() class stores metadata about pedigrees. Hopefully this will help improve performance in some procedures, as well as provide some useful summary data.

\item[\textbf{\_\_init\_\_(myped, kw)} $\Rightarrow$ object]\index[func]{pyp_newclasses!PedigreeMetadata!\_\_init\_\_()}
\_\_init\_\_() initializes a PedigreeMetadata object.
\begin{description}
\item[\emph{self}] Reference to the current Pedigree() object
\item[\emph{myped}] A PyPedal pedigree.
\item[\emph{kw}] A dictionary of options.
\item[Returns:] An instance of a Pedigree() object populated with data
\end{description}

\item[\textbf{fileme()} $\Rightarrow$ None]\index[func]{pyp_newclasses!PedigreeMetadata!fileme()}
fileme() writes the metada stored in the Pedigree() object to disc.
\begin{description}
\item[\emph{self}] Reference to the current Pedigree() object
\end{description}

\item[\textbf{nud()} $\Rightarrow$ integer-and-list]\index[func]{pyp_newclasses!PedigreeMetadata!nud()}
nud() returns the number of unique dams in the pedigree along with a list of the dams
\begin{description}
\item[\emph{self}] Reference to the current Pedigree() object
\item[Returns:] The number of unique dams in the pedigree and a list of those dams
\end{description}

\item[\textbf{nuf()} $\Rightarrow$ integer-and-list]\index[func]{pyp_newclasses!PedigreeMetadata!nuf()}
nuf() returns the number of unique founders in the pedigree along with a list of the founders
\begin{description}
\item[\emph{self}] Reference to the current Pedigree() object
\item[Returns:] The number of unique founders in the pedigree and a list of those founders
\end{description}

\item[\textbf{nug()} $\Rightarrow$ integer-and-list]\index[func]{pyp_newclasses!PedigreeMetadata!nug()}
nug() returns the number of unique generations in the pedigree along with a list of the generations
\begin{description}
\item[\emph{self}] Reference to the current Pedigree() object
\item[Returns:] The number of unique generations in the pedigree and a list of those generations
\end{description}

\item[\textbf{nus()} $\Rightarrow$ integer-and-list]\index[func]{pyp_newclasses!PedigreeMetadata!nus()}
nus() returns the number of unique sires in the pedigree along with a list of the sires
\begin{description}
\item[\emph{self}] Reference to the current Pedigree() object
\item[Returns:] The number of unique sires in the pedigree and a list of those sires
\end{description}

\item[\textbf{nuy()} $\Rightarrow$ integer-and-list]\index[func]{pyp_newclasses!PedigreeMetadata!nuy()}
nuy() returns the number of unique birthyears in the pedigree along with a list of the birthyears
\begin{description}
\item[\emph{self}] Reference to the current Pedigree() object
\item[Returns:] The number of unique birthyears in the pedigree and a list of those birthyears
\end{description}

\item[\textbf{nuherds()} $\Rightarrow$ integer-and-list]\index[func]{pyp_newclasses!PedigreeMetadata!nuherds()}
nuherds() returns the number of unique herds in the pedigree along with a list of the herdss
\begin{description}
\item[\emph{self}] Reference to the current Pedigree() object
\item[Returns:] The number of unique herds in the pedigree and a list of those herds
\end{description}

\item[\textbf{printme()} $\Rightarrow$ None]\index[func]{pyp_newclasses!PedigreeMetadata!printme()}
printme() prints a summary of the metadata stored in the Pedigree() object.
\begin{description}
\item[\emph{self}] Reference to the current Pedigree() object
\end{description}

\item[\textbf{stringme()} $\Rightarrow$ None]\index[func]{pyp_newclasses!PedigreeMetadata!stringme()}
stringme() returns a summary of the metadata stored in the pedigree as a string.
\begin{description}
\item[\emph{self}] Reference to the current Pedigree() object
\end{description}

\end{description}


\subsection*{The SimAnimal Class}
\begin{description}
\item[\textbf{SimAnimal(animalID,sireID,damID,sex,gen)} (class)]
SimAnimal() is a very lightweight class used for simulating pedigrees.

\item[\textbf{\_\_init\_\_(animalID,sireID=0,damID=0,sex='u',gen=0)} $\Rightarrow$ object]\index[func]{pyp_newclasses!SimAnimal!\_\_init\_\_()}
\_\_init\_\_() initializes a SimAnimal() object.
\begin{description}
\item[\emph{animalID}] The animal's ID
\item[\emph{sireID}] The sire's ID
\item[\emph{damID}] The dam's ID
\item[\emph{sex}] The sex of the animal ('m'|'f'|'u')
\item[\emph{gen}] The animal's generation code.
\item[Returns:] An instance of a SimAnimal() object populated with data
\end{description}

\item[\textbf{printme()} $\Rightarrow$ None]\index[func]{pyp_newclasses!SimAnimal!printme()}
printme() prints a summary of the data stored in the SimAnimal() object.
\begin{description}
\item[\emph{self}] Reference to the current SimAnimal() object
\item[Returns:] None
\end{description}

\item[\textbf{stringme()} $\Rightarrow$ None]\index[func]{pyp_newclasses!SimAnimal!stringme()}
stringme() returns a summary of the data stored in the SimAnimal() object as a string.
\begin{description}
\item[\emph{self}] Reference to the current SimAnimal() object
\item[Returns:] A string containing the data in the SimAnimal() object
\end{description}

\end{description}