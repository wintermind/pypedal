pyp\_metrics contains a set of procedures for calculating metrics on PyPedal pedigree objects. These metrics include coefficients of inbreeding and relationship as well as effective founder number, effective population size, and effective ancestor number.

\subsection*{Module Contents}
\begin{description}
\item[\textbf{a\_coefficients(pedobj, a='', method='nrm')} $\Rightarrow$ dictionary]
a\_coefficients() writes population average coefficients of inbreeding and relationship to a file, as well as individual animal IDs and coefficients of inbreeding. Some pedigrees are too large for fast\_a\_matrix() or fast\_a\_matrix\_r() -- an array that large cannot be allocated due to memory restrictions -- and will result in a value of -999.9 for all outputs.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{a}] A numerator relationship matrix (optional).
\item[\emph{method}] If no relationship matrix is passed, determines which procedure should be called to build one (nrm|frm).
\item[Returns:] A dictionary of non-zero individual inbreeding coefficients.
\end{description}

\item[\textbf{a\_effective\_ancestors\_definite(pedobj, a='', gen='')} $\Rightarrow$ float]
a\_effective\_ancestors\_definite() uses the algorithm in Appendix B of Boichard et al. \cite{ref352} to compute the effective ancestor number for a myped pedigree. NOTE: One problem here is that if you pass a pedigree WITHOUT generations and error is not thrown. You simply end up wth a list of generations that contains the default value for Animal() objects, 0. Boichard's algorithm requires information about the generation of animals. If you do not provide an input pedigree with generations things may not work. By default the most recent generation -- the generation with the largest generation ID -- will be used as the reference population.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{a}] A numerator relationship matrix (optional).
\item[\emph{gen}] Generation of interest.
\item[Returns:] The effective founder number.
\end{description}

\item[\textbf{a\_effective\_ancestors\_indefinite(pedobj, a='', gen='', n=25)} $\Rightarrow$ float]
a\_effective\_ancestors\_indefinite() uses the approach outlined on pages 9 and 10 of Boichard et al. \cite{ref352} to compute approximate upper and lower bounds for f\_a. This is much more tractable for large pedigrees than the exact computation provided in a\_effective\_ancestors\_definite(). NOTE: One problem here is that if you pass a pedigree WITHOUT generations and error is not thrown. You simply end up wth a list of generations that contains the default value for Animal() objects, 0. NOTE: If you pass a value of n that is greater than the actual number of ancestors in the pedigree then strange things happen. As a stop-gap, a\_effective\_ancestors\_indefinite() will detect that case and replace n with the number of founders - 1. Boichard's algorithm requires information about the GENERATION of animals. If you do not provide an input pedigree with generations things may not work. By default the most recent generation -- the generation with the largest generation ID -- will be used as the reference population.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{a}] A numerator relationship matrix (optional).
\item[\emph{gen}] Generation of interest.
\item[Returns:] The effective founder number.
\end{description}

\item[\textbf{a\_effective\_founders\_boichard(pedobj, a='', gen='')} $\Rightarrow$ float]
a\_effective\_founders\_boichard() uses the algorithm in Appendix A of Boichard et al. \cite{ref352} to compute the effective founder number for pedobj. Note that results from this function will not necessarily match those from a\_effective\_founders\_lacy(). Boichard's algorithm requires information about the GENERATION of animals. If you do not provide an input pedigree with generations things may not work. By default the most recent generation -- the generation with the largest generation ID -- will be used as the reference population.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{a}] A numerator relationship matrix (optional).
\item[\emph{gen}] Generation of interest.
\item[Returns:] The effective founder number.
\end{description}

\item[\textbf{a\_effective\_founders\_lacy(pedobj, a='')} $\Rightarrow$ float]
a\_effective\_founders\_lacy() calculates the number of effective founders in a pedigree using the exact method of Lacy \cite{ref640}.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{a}] A numerator relationship matrix (optional).
\item[Returns:] The effective founder number.
\end{description}

\item[\textbf{common\_ancestors(anim\_a, anim\_b, pedobj)} $\Rightarrow$ list]
common\_ancestors() returns a list of the ancestors that two animals share in common.
\begin{description}
\item[\emph{anim\_a}] The renumbered ID of the first animal, a.
\item[\emph{anim\_b}] The renumbered ID of the second animal, b.
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[Returns:] A list of animals related to anim\_a AND anim\_b
\end{description}

\item[\textbf{descendants(anid, pedobj, \_desc)} $\Rightarrow$ list]
descendants() uses pedigree metadata to walk a pedigree and return a list of all of the descendants of a given animal.
\begin{description}
\item[\emph{anid}] An animal ID
\item[\emph{pedobj}] A Python list of PyPedal Animal() objects.
\item[\emph{\_desc}] A Python dictionary of descendants of animal anid.
\item[Returns:] A list of descendants of anid.
\end{description}

\item[\textbf{effective\_founder\_genomes(pedobj, rounds=10)} $\Rightarrow$ float]
effective\_founder\_genomes() simulates the random segregation of founder alleles through a pedigree after the method of MacCluer et al. \cite{ref1719}. At present only two alleles are simulated for each founder. Summary statistics are computed on the most recent generation.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{rounds}] The number of times to simulate segregation through the entire pedigree.
\item[Returns:] The effective number of founder genomes over based on 'rounds' gene-drop simulations.
\end{description}

\item[\textbf{effective\_founders\_lacy(pedobj)} $\Rightarrow$ float]
effective\_founders\_lacy() calculates the number of effective founders in a pedigree using the exact method of  Lacy \cite{ref640}. This version of the routine a\_effective\_founders\_lacy() is designed to work with larger pedigrees as it forms ``familywise'' relationship matrices rather than a ``populationwise'' relationship matrix.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[Returns:] The effective founder number.
\end{description}

\item[\textbf{fast\_a\_coefficients(pedobj, a='', method='nrm', debug=0)} $\Rightarrow$ dictionary]
a\_fast\_coefficients() writes population average coefficients of inbreeding and relationship to a file, as well as individual animal IDs and coefficients of inbreeding. It returns a list of non-zero individual CoI.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{a}] A numerator relationship matrix (optional).
\item[\emph{method}] If no relationship matrix is passed, determines which procedure should be called to build one (nrm|frm).
\item[Returns:] A dictionary of non-zero individual inbreeding coefficients.
\end{description}

\item[\textbf{founder\_descendants(pedobj)} $\Rightarrow$ dictionary [\#]]
founder\_descendants() returns a dictionary containing a list of descendants of each founder in the pedigree.
\begin{description}
\item[\emph{pedojb}] An instance of a PyPedal NewPedigree object.
\end{description}

\item[\textbf{generation\_lengths(pedobj, units='y')} $\Rightarrow$ dictionary]
generation\_lengths() computes the average age of parents at the time of birth of their first offspring. This is implies that selection decisions are made at the time of birth of of the first offspring. Average ages are computed for each of four paths: sire-son, sire-daughter, dam-son, and dam-daughter. An overall mean is computed, as well. IT IS IMPORTANT to note that if you DO NOT provide birthyears in your pedigree file that the returned dictionary will contain only zeroes! This is because when no birthyer is provided a default value (1900) is assigned to all animals in the pedigree.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{units}] A character indicating the units in which the generation lengths should be returned.
\item[Returns:] A dictionary containing the five average ages.
\end{description}

\item[\textbf{generation\_lengths\_all(pedobj, units='y')} $\Rightarrow$ dictionary]
generation\_lengths\_all() computes the average age of parents at the time of birth of their offspring. The computation is made using birth years for all known offspring of sires and dams, which implies discrete generations. Average ages are computed for each of four paths: sire-son, sire-daughter, dam-son, and dam-daughter. An overall mean is computed, as well. IT IS IMPORTANT to note that if you DO NOT provide birthyears in your pedigree file that the returned dictionary will contain only zeroes! This is because when no birthyear is provided a default value (1900) is assigned to all animals in the pedigree.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{units}] A character indicating the units in which the generation lengths should be returned.
\item[Returns:] A dictionary containing the five average ages.
\end{description}

\item[\textbf{mating\_coi(anim\_a, anim\_b, pedobj)} $\Rightarrow$ float]
mating\_coi() returns the coefficient of inbreeding of offspring of a mating between two animals, anim\_a and anim\_b.
\begin{description}
\item[\emph{anim\_a}] The renumbered ID of an animal, a.
\item[\emph{anim\_b}] The renumbered ID of an animal, b.
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[Returns:] The coefficient of relationship of anim\_a and anim\_b
\end{description}

\item[\textbf{min\_max\_f(pedobj, a='', n=10)} $\Rightarrow$ list]
min\_max\_f() takes a pedigree and returns a list of the individuals with the n largest and n smallest coefficients of inbreeding. Individuals with CoI of zero are not included.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{a}] A numerator relationship matrix (optional).
\item[\emph{n}] An integer (optional, default is 10).
\item[Returns:] Lists of the individuals with the n largest and the n smallest CoI in the pedigree as (ID, CoI) tuples.
\end{description}

\item[\textbf{num\_equiv\_gens(pedobj)} $\Rightarrow$ dictionary]
num\_equiv\_gens() computes the number of equivalent generations as the sum of (1/2)\^{}n, where n is the number of generations separating an individual and each of its known ancestors.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[Returns:] A dictionary containing the five average ages.
\end{description}

\item[\textbf{num\_traced\_gens(pedobj)} $\Rightarrow$ dictionary]
num\_traced\_gens() is computed as the number of generations separating offspring from the oldest known ancestor in in each selection path. Ancestors with unknown parents are assigned to generation 0. See Valera at al. \cite{Valera2005a} for details.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[Returns:] A dictionary containing the five average ages.
\end{description}

\item[\textbf{partial\_inbreeding(pedobj)} $\Rightarrow$ dictionary]
partial\_inbreeding() computes the number of equivalent generations as the sum of $\frac{1}{2}^{n}$, where n is the number of generations separating an individual and each of its known ancestors.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[Returns:] A dictionary containing the five average ages.
\end{description}

\item[\textbf{pedigree\_completeness(pedobj, gens=4)}]
pedigree\_completeness() computes the proportion of known ancestors in the pedigree of each animal in the population for a user-determined number of generations. Also, the mean pedcomps for all animals and for all animals that are not founders are computed as summary statistics.  This is similar to pedigree completeness as computed by Cassel at al. \cite{ref615}, but with some of the modifications of VanRaden (2003) (\url{http://www.aipl.arsusda.gov/reference/changes/eval0311.html}).
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{gens}] The number of generations the pedigree should be traced for completeness.
\end{description}

\item[\textbf{related\_animals(anim\_a, pedobj)} $\Rightarrow$ list]
related\_animals() returns a list of the ancestors of an animal.
\begin{description}
\item[\emph{anim\_a}] The renumbered ID of an animal, a.
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[Returns:] A list of animals related to anim\_a
\end{description}

\item[\textbf{relationship(anim\_a, anim\_b, pedobj)} $\Rightarrow$ float]
relationship() returns the coefficient of relationship for two animals, anim\_a and anim\_b.
\begin{description}
\item[\emph{anim\_a}] The renumbered ID of an animal, a.
\item[\emph{anim\_b}] The renumbered ID of an animal, b.
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[Returns:] The coefficient of relationship of anim\_a and anim\_b
\end{description}

\item[\textbf{theoretical\_ne\_from\_metadata(pedobj)}]
theoretical\_ne\_from\_metadata() computes the theoretical effective population size based on the number of sires and dams contained in a pedigree metadata object. Writes results to an output file.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\end{description}
\end{description}