pyp\_utils\index[func]{pyp_utils} contains a set of procedures for creating and operating on PyPedal pedigrees. This includes routines for reordering and renumbering pedigrees, as well as for modifying pedigrees.

\subsection*{Module Contents}

\begin{description}
\item[\textbf{assign\_offspring(pedobj)} $\Rightarrow$ integer]\index[func]{pyp_utils!assign_offspring()}
assign\_offspring() assigns offspring to their parent(s)'s unknown sex offspring list (well, dictionary).
\begin{description}
\item[\emph{myped}] An instance of a NewPedigree object.
\item[Returns:] 0 for failure and 1 for success.
\end{description}

\item[\textbf{assign\_sexes(pedobj)} $\Rightarrow$ integer]\index[func]{pyp_utils!assign_sexes()}
assign\_sexes() assigns a sex to every animal in the pedigree using sire and daughter lists for improved accuracy.
\begin{description}
\item[\emph{pedobj}] A renumbered and reordered PyPedal pedigree object.
\item[Returns:] 0 for failure and 1 for success.
\end{description}

\item[\textbf{delete\_id\_map(filetag='\_renumbered\_')} $\Rightarrow$ integer]\index[func]{pyp_utils!delete_id_map()}
delete\_id\_map() checks to see if an ID map for the given filetag exists. If the file exists, it is deleted.
\begin{description}
\item[\emph{filetag}] A descriptor prepended to output file names that is used to determine name of the file to delete.
\item[Returns:] A flag indicating whether or not the file was successfully deleted (0|1)
\end{description}

\item[\textbf{fast\_reorder(myped, filetag='\_new\_reordered\_', io='no', debug=0)} $\Rightarrow$ list]\index[func]{pyp_utils!fast_reorder()}
fast\_reorder() renumbers a pedigree such that parents precede their offspring in the pedigree. In order to minimize overhead as much as is reasonably possible, a list of animal IDs that have already been seen is kept. Whenever a parent that is not in the seen list is encountered, the offspring of that parent is moved to the end of the pedigree. This should ensure that the pedigree is properly sorted such that all parents precede their offspring. myped is reordered in place. fast\_reorder() uses dictionaries to renumber the pedigree based on paddedIDs.
\begin{description}
\item[\emph{myped}] A PyPedal pedigree object.
\item[\emph{filetag}] A descriptor prepended to output file names.
\item[\emph{io}] Indicates whether or not to write the reordered pedigree to a file (yes|no).
\item[\emph{debug}] Flag to indicate whether or not debugging messages are written to STDOUT.
\item[Returns:] A reordered PyPedal pedigree.
\end{description}

\item[\textbf{load\_id\_map(filetag='\_renumbered\_')} $\Rightarrow$ dictionary]\index[func]{pyp_utils!load_id_map()}
load\_id\_map() reads an ID map from the file generated by pyp\_utils/renumber() into a dictionary. There is a VERY similar function, pyp\_io/id\_map\_from\_file(), that is deprecated because it is much more fragile that this procedure.
\begin{description}
\item[\emph{filetag}] A descriptor prepended to output file names that is used to determine the input file name.
\item[Returns:] A dictionary whose keys are renumbered IDs and whose values are original IDs or an empty dictionary (on failure).
\end{description}

\item[\textbf{pedigree\_range(pedobj, n)} $\Rightarrow$ list]\index[func]{pyp_utils!pedigree_range()}
pedigree\_range() takes a renumbered pedigree and removes all individuals with a renumbered ID $>$ n. The reduced pedigree is returned. Assumes that the input pedigree is sorted on animal key in ascending order.
\begin{description}
\item[\emph{myped}] A PyPedal pedigree object.
\item[\emph{n}] A renumbered animalID.
\item[Returns:] A pedigree containing only animals born in the given birthyear or an empty list (on failure).
\end{description}

\item[\textbf{pyp\_nice\_time()} $\Rightarrow$ string]\index[func]{pyp_utils!pyp_nice_time()}
pyp\_nice\_time() returns the current date and time formatted as, e.g., Wed Mar 30 10:26:31 2005.
\begin{description}
\item[\emph{None}]
\item[Returns:] A string containing the formatted date and time.
\end{description}

\item[\textbf{renumber(myped, filetag='\_renumbered\_', io='no', outformat='0', debug=0)} $\Rightarrow$ list]\index[func]{pyp_utils!renumber()}
renumber() takes a pedigree as input and renumbers it such that the oldest animal in the pedigree has an ID of '1' and the n-th animal has an ID of 'n'. If the pedigree is not ordered from oldest to youngest such that all offspring precede their offspring, the pedigree will be reordered. The renumbered pedigree is written to disc in 'asd' format and a map file that associates sequential IDs with original IDs is also written.
\begin{description}
\item[\emph{myped}] A PyPedal pedigree object.
\item[\emph{filetag}] A descriptor prepended to output file names.
\item[\emph{io}] Indicates whether or not to write the renumbered pedigree to a file (yes|no).
\item[\emph{outformat}] Flag to indicate whether or not to write an asd pedigree (0) or a full pedigree (1).
\item[\emph{debug}] Flag to indicate whether or not progress messages are written to stdout.
\item[Returns:] A reordered PyPedal pedigree.
\end{description}

\item[\textbf{reorder(myped, filetag='\_reordered\_', io='no')} $\Rightarrow$ list]\index[func]{pyp_utils!reorder()}
reorder() renumbers a pedigree such that parents precede their offspring in the pedigree. In order to minimize overhead as much as is reasonably possible, a list of animal IDs that have already been seen is kept. Whenever a parent that is not in the seen list is encountered, the offspring of that parent is moved to the end of the pedigree. This should ensure that the pedigree is properly sorted such that all parents precede their offspring. myped is reordered in place. reorder() is VERY slow, but I am pretty sure that it works correctly.
\begin{description}
\item[\emph{myped}] A PyPedal pedigree object.
\item[\emph{filetag}] A descriptor prepended to output file names.
\item[\emph{io}] Indicates whether or not to write the reordered pedigree to a file (yes|no).
\item[Returns:] A reordered PyPedal pedigree.
\end{description}

\item[\textbf{reverse\_string(mystring)} $\Rightarrow$ string]\index[func]{pyp_utils!reverse_string()}
reverse\_string() reverses the input string and returns the reversed version.
\begin{description}
\item[\emph{mystring}] A non-empty Python string.
\item[Returns:] The input string with the order of its characters reversed.
\end{description}

\item[\textbf{set\_age(pedobj)} $\Rightarrow$ integer]\index[func]{pyp_utils!set_age()}
set\_age() Computes ages for all animals in a pedigree based on the global BASE\_DEMOGRAPHIC\_YEAR defined in pyp\_demog.py. If the by is unknown, the inferred generation is used. If the inferred generation is unknown, the age is set to -999.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[Returns:] 0 for failure and 1 for success.
\end{description}

\item[\textbf{set\_ancestor\_flag(pedobj)} $\Rightarrow$ integer]\index[func]{pyp_utils!set_ancestor_flag()}
set\_ancestor\_flag() loops through a pedigree to build a dictionary of all of the parents in the pedigree. It then sets the ancestor flags for the parents. set\_ancestor\_flag() expects a reordered and renumbered pedigree as input!
\begin{description}
\item[\emph{pedobj}] A PyPedal NewPedigree object.
\item[Returns:] 0 for failure and 1 for success.
\end{description}

\item[\textbf{set\_generation(pedobj)} $\Rightarrow$ integer]\index[func]{pyp_utils!set_generation()}
set\_generation() Works through a pedigree to infer the generation to which an animal belongs based on founders belonging to generation 1. The igen assigned to an animal as the larger of sire.igen+1 and dam.igen+1. This routine assumes that myped is reordered and renumbered.
\begin{description}
\item[\emph{pedobj}] A PyPedal NewPedigree object.
\item[Returns:] 0 for failure and 1 for success.
\end{description}

\item[\textbf{set\_species(pedobj, species='u')} $\Rightarrow$ integer]\index[func]{pyp_utils!set_species()}
set\_species() assigns a specie to every animal in the pedigree.
\begin{description}
\item[\emph{pedobj}] A PyPedal pedigree object.
\item[\emph{species}] A PyPedal string.
\item[Returns:] 0 for failure and 1 for success.
\end{description}

\item[\textbf{simple\_histogram\_dictionary(mydict, histchar='*', histstep=5)} $\Rightarrow$ dictionary]\index[func]{pyp_utils!simple_histogram_dictionary()}
simple\_histogram\_dictionary() returns a dictionary containing a simple, text histogram. The input dictionary is assumed to contain keys which are distinct levels and values that are counts.
\begin{description}
\item[\emph{mydict}] A non-empty Python dictionary.
\item[\emph{histchar}] The character used to draw the histogram (default is '*').
\item[\emph{histstep}] Used to determine the number of bins (stars) in the diagram.
\item[Returns:] A dictionary containing the histogram by level or an empty dictionary (on failure).
\end{description}

\item[\textbf{sort\_dict\_by\_keys(mydict)} $\Rightarrow$ dictionary]\index[func]{pyp_utils!sort_dict_by_keys()}
sort\_dict\_by\_keys() returns a dictionary where the values in the dictionary in the order obtained by sorting the keys. Taken from the routine sortedDictValues3 in the ``Python Cookbook'', p. 39.
\begin{description}
\item[\emph{mydict}] A non-empty Python dictionary.
\item[Returns:] The input dictionary with keys sorted in ascending order or an empty dictionary (on failure).
\end{description}

\item[\textbf{sort\_dict\_by\_values(first, second)} $\Rightarrow$ list]\index[func]{pyp_utils!sort_dict_by_values()}
sort\_dict\_by\_values() returns a dictionary where the keys in the dictionary are sorted ascending value, first on value and then on key within value. The implementation was taken from John Hunter's contribution to a newsgroup thread: \url{http://groups-beta.google.com/group/comp.lang.python/browse}\_thread/thread/bbc259f8454e4d3f/cc686f4cd795feb4?q=python+\%22sorted+dictionary\%22=1=en\#cc686f4cd795feb4
\begin{description}
\item[\emph{mydict}] A non-empty Python dictionary.
\item[Returns:] A list of tuples sorted in ascending order.
\end{description}

\item[\textbf{string\_to\_table\_name(instring)} $\Rightarrow$ string]\index[func]{pyp_utils!string_to_table_name()}
string\_to\_table\_name() takes an arbitrary string and returns a string that is safe to use as an SQLite table name.
\begin{description}
\item[\emph{instring}] A string that will be converted to an SQLite-safe table name.
\item[Returns:] A string that is safe to use as an SQLite table name.
\end{description}

\item[\textbf{trim\_pedigree\_to\_year(pedobj, year)} $\Rightarrow$ list]\index[func]{pyp_utils!trim_pedigree_to_year()}
trim\_pedigree\_to\_year() takes pedigrees and removes all individuals who were not born in birthyear 'year'.
\begin{description}
\item[\emph{myped}] A PyPedal pedigree object.
\item[\emph{year}] A birthyear.
\item[Returns:] A pedigree containing only animals born in the given birthyear or an ampty list (on failure).
\end{description}

\end{description}